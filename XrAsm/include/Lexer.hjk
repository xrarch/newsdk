#INCLUDE "<inc>/Frontend.hjk"

ENUM LexTokenType : UBYTE
    TOKEN_ANY,

    TOKEN_DIRECTIVE, // subtype is a directive
    TOKEN_INSTRUCTION, // subtype is an instruction
    TOKEN_AUX, // subtype is target-specific
    TOKEN_REGISTER,
    TOKEN_CONTROL_REGISTER,
    TOKEN_FP_REGISTER,
    TOKEN_SIZE_SPECIFIER,

    TOKEN_OPER, // subtype is operator type

    TOKEN_LPAREN,
    TOKEN_RPAREN,
    TOKEN_LBRACKET,
    TOKEN_RBRACKET,
    TOKEN_COLON,
    TOKEN_LBRACE,
    TOKEN_RBRACE,
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_NEWLINE,
    TOKEN_EQUALS,

    TOKEN_IDENTIFIER, // payload is a symbol table entry pointer
    TOKEN_STRING, // payload is a pointer to a LexStringContents structure
    TOKEN_NUMBER, // payload is the number value

    TOKEN_LABEL, // virtual

    TOKEN_EOF,
    TOKEN_TYPE_MAX, // MUST be at the end
END

ENUM LexTokenSubtype : UBYTE
    TOKEN_SUBTYPE_ANY,

    TOKEN_SECTION,     // directive
    TOKEN_DB,          // directive
    TOKEN_DI,          // directive
    TOKEN_DL,          // directive
    TOKEN_DQ,          // directive
    TOKEN_DP,          // directive
    TOKEN_DEFINE,      // directive
    TOKEN_INCBIN,      // directive
    TOKEN_BYTES,       // directive
    TOKEN_GLOBAL,      // directive
    TOKEN_EXPORT,      // directive
    TOKEN_EXTERN,      // directive
    TOKEN_DS,          // directive
    TOKEN_ALIGN,       // directive

    TOKEN_BITAND,      // operator
    TOKEN_BITOR,       // operator
    TOKEN_PLUS,        // operator
    TOKEN_MINUS,       // operator
    TOKEN_DIVIDE,      // operator
    TOKEN_MODULO,      // operator
    TOKEN_BITXOR,      // operator
    TOKEN_LEFTSHIFT,   // operator
    TOKEN_RIGHTSHIFT,  // operator
    TOKEN_BITNOT,      // operator
    TOKEN_MUL,         // operator

    TOKEN_INVERSE,     // virtual operator

    TOKEN_IDENTIFIER_NEW,
    TOKEN_IDENTIFIER_FOUND,

    TOKEN_SUBTYPE_MAX, // MUST be at the end of the token subtypes
END

ENUM LexSymbolType : UBYTE
    SYM_UNINITIALIZED,
    SYM_LABEL,
    SYM_SECTION,

    // The "forward" types signify a symbol that has been used before it was
    // defined, in a context where it was okay to do so. In fact, it's okay to
    // never declare these as long as they weren't referenced in the source
    // program.

    SYM_FORWARD_LABEL,
END

#INCLUDE "../../Cf/CfLexer.hjk"

ENUM AsmLabelVisibility : UBYTE
    LABEL_LOCAL,
    LABEL_GLOBAL,
    LABEL_EXPORT,
    LABEL_EXTERN,

    LABEL_VIS_MAX,
END

STRUCT LexSymbol
    Entry : TlHashTableEntry, // MUST be at the beginning
    Name : ^UBYTE,

    // Parser private stuff in a symbol.

    SymbolListEntry : TlListEntry,

    LocalLabelScope : ^TlSymbolTable,

    Section : ^AsmSection,

    FileOffset : UWORD,
    MemoryOffset : UWORD,

    Index : ULONG,

    Type : LexSymbolType,
    Visibility : AsmLabelVisibility,
    Used : UBYTE,
END
//
// Main header for the Toolchain Library (Tl).
//

ENUM TlStatus : UWORD
    TL_SUCCESS,
    TL_NO_MEMORY,
    TL_COULDNT_OPEN,
END

#IF ( == BLD_BITS 64 )

#DEFINE TL_MACHINE_WORD_MAX 0xFFFFFFFFFFFFFFFF
#DEFINE TL_MACHINE_WORD_WIDTH 64
#DEFINE TL_MACHINE_WORD_LOG 3

#ELSEIF ( == BLD_BITS 32 )

#DEFINE TL_MACHINE_WORD_MAX 0xFFFFFFFF
#DEFINE TL_MACHINE_WORD_WIDTH 32
#DEFINE TL_MACHINE_WORD_LOG 2

#ELSE

#ERROR ( STRCAT "[BLD] Bad bitness: " BLD_BITS )

#END

#DEFINE TL_MACHINE_WORD_SIZE ( << 1 TL_MACHINE_WORD_LOG )

#DEFINE TL_ARCH_STRING ( STRCAT ( STRCAT "\"" ARCHITECTURE ) "\"" )

#MACRO TlInitializeList ( head ) [
    listhead := (head)

    listhead^.Prev = listhead
    listhead^.Next = listhead
]

#MACRO TlInsertAtTailList ( head, entry ) [
    listhead := (head)
    listentry := (entry)
    last := listhead^.Prev

    listentry^.Prev = last
    listentry^.Next = listhead
    last^.Next = listentry
    listhead^.Prev = listentry
]

#MACRO TlInsertAtHeadList ( head, entry ) [
    listhead := (head)
    listentry := (entry)
    first := listhead^.Next

    listentry^.Next = first
    listentry^.Prev = listhead
    first^.Prev = (entry)
    listhead^.Next = (entry)
]

#MACRO TlRemoveEntryList ( entry ) [
    listentry := (entry)

    prev := listentry^.Prev
    next := listentry^.Next
    prev^.Next = next
    next^.Prev = prev
]

STRUCT TlListEntry
    Next : ^TlListEntry,
    Prev : ^TlListEntry,
END

EXTERN FN TlMain (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

EXTERN FN TlInitialize (
    IN programname : ^UBYTE,
)

EXTERN FN TlMeasureString (
    IN str : ^UBYTE,
) : UWORD

EXTERN FN TlFillMemoryWithByte (
    IN ptr : ^VOID,
    IN sz : UWORD,
    IN byte : UWORD,
)

EXTERN FN TlCopyMemory (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : UWORD,
)

EXTERN FN TlInternalError (
    IN str : ^UBYTE,
    IN err1 : UWORD,
    IN err2 : UWORD,
    IN err3 : UWORD,
)

EXTERN FN TlUserError (
    IN str : ^UBYTE,
    IN err1 : UWORD,
    IN err2 : UWORD,
    IN err3 : UWORD,
)

EXTERN FN TlErrorExit ()

EXTERN FN TlBumpAlloc (
    IN bytes : UWORD,
    OUT ptr : ^VOID,
) : TlStatus

EXTERN FN TlAlloc (
    IN bytes : UWORD,
    OUT ptr : ^VOID,
) : TlStatus

EXTERN FN TlFree (
    IN ptr : ^VOID,
)

EXTERN FN TlCompareString (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
) : UWORD

EXTERN FN TlCompareStringWithMax (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
    IN count : UWORD,
) : UWORD

EXTERN FN TlCopyString (
    IN dest : ^UBYTE,
    IN src : ^UBYTE,
    IN bufsize : UWORD,
)

EXTERN FN TlOpenSource (
    IN filename : ^UBYTE,
    OUT handle : ^VOID,
) : TlStatus

EXTERN FN TlOpenDestination (
    IN filename : ^UBYTE,
    OUT handle : ^VOID,
) : TlStatus

EXTERN FN TlOpenDestinationAndTruncate (
    IN filename : ^UBYTE,
    IN size : UWORD,
    OUT handle : ^VOID,
) : TlStatus

EXTERN FN TlClose (
    IN handle : ^VOID,
)

EXTERN FN TlReadFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
    IN buffer : ^VOID,
) : UWORD

EXTERN FN TlWriteFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
    IN buffer : ^VOID,
) : UWORD

EXTERN FN TlSeekFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
)

EXTERN TlHeapHits : UWORD
EXTERN TlBumpBytesUsed : UWORD
EXTERN TlBumpHits : UWORD


// hash table stuff


#DEFINE TL_HASH_SIZE 97

STRUCT TlHashTable
    OrderedListHead : TlListEntry,
    BucketHeads : TlListEntry[TL_HASH_SIZE],
END

STRUCT TlHashTableEntry
    HashEntry : TlListEntry,
    OrderedEntry : TlListEntry,

    HashTable : ^TlHashTable,

    Key : ^UBYTE,
END

FNPTR TlHashTableEnumeratorF (
    IN entry : ^TlHashTableEntry,
)

EXTERN FN TlInitializeHashTable (
    IN hashtable : ^TlHashTable,
)

EXTERN FN TlSummarizeHashTable (
    IN hashtable : ^TlHashTable,
)

EXTERN FN TlInsertHashTable (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
)

EXTERN FN TlLookupOrInsertHashTable (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
) : ^TlHashTableEntry

EXTERN FN TlLookupOrAllocateEntryHashTable (
    IN hashtable : ^TlHashTable,
    IN entrysize : UWORD,
    IN key : ^UBYTE,
    OUT created : UBYTE,
) : ^TlHashTableEntry

EXTERN FN TlLookupHashTable (
    IN hashtable : ^TlHashTable,
    IN key : ^UBYTE,
) : ^TlHashTableEntry

EXTERN FN TlRemoveHashTable (
    IN entry : ^TlHashTableEntry,
)

EXTERN FN TlEnumerateHashTable (
    IN hashtable : ^TlHashTable,
    IN enumfunc : TlHashTableEnumeratorF,
)

EXTERN FN TlLookupHashTableByHash (
    IN hashtable : ^TlHashTable,
    IN key : ^UBYTE,
    IN hash : UWORD,
) : ^TlHashTableEntry

EXTERN FN TlHashString (
    IN str : ^UBYTE,
) : UWORD


// symbol table stuff


STRUCT TlSymbolTable
    PrevScope : ^TlSymbolTable, // previous in the scope stack
    HashTable : TlHashTable,
    DeleteRoutine : TlHashTableEnumeratorF,
END

EXTERN FN TlInitializeSymbolTable (
    IN symboltable : ^TlSymbolTable,
    IN outerscope : ^TlSymbolTable,
    IN deletefunc : TlHashTableEnumeratorF,
)

EXTERN FN TlCreateSymbolTable (
    IN outerscope : ^TlSymbolTable,
    IN deletefunc : TlHashTableEnumeratorF,
) : ^TlSymbolTable

EXTERN FN TlDeleteSymbolTable (
    IN symboltable : ^TlSymbolTable,
) : ^TlSymbolTable

EXTERN FN TlLookupSymbolTable (
    IN symboltable : ^TlSymbolTable,
    IN name : ^UBYTE,
) : ^TlHashTableEntry

EXTERN FN TlInsertSymbolTable (
    IN symboltable : ^TlSymbolTable,
    IN entry : ^TlHashTableEntry,
    IN name : ^UBYTE,
)

EXTERN FN TlRemoveSymbolTable (
    IN entry : ^TlHashTableEntry,
)


// dynamic buffer stuff


#DEFINE TL_DYNAMIC_BUFFER_INITIAL 64

STRUCT TlDynamicBuffer
    Count : UWORD,
    BufferSize : UWORD,
    Buffer : ^UBYTE,

    InitialBuffer : UBYTE[TL_DYNAMIC_BUFFER_INITIAL]
END

EXTERN FN TlInitializeDynamicBuffer (
    IN array : ^TlDynamicBuffer,
)

EXTERN FN TlUninitializeDynamicBuffer (
    IN array : ^TlDynamicBuffer,
)

EXTERN FN TlpInsertDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN byte : UBYTE,
)

#MACRO TlInsertDynamicBuffer ( array, byte ) [
    IF (array)^.Count + 1 < (array)^.BufferSize THEN
        (array)^.Buffer[(array)^.Count] = byte
        NOTHING (array)^.Count += 1
    ELSE
        TlpInsertDynamicBuffer ( array, byte )
    END
]

EXTERN FN TlCopyIntoDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN srcbuf : ^UBYTE,
    IN length : UWORD,
)

EXTERN FN TlInsertNumberDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN number : UWORD,
    IN base : UBYTE,
)

EXTERN FN TlPopDynamicBuffer (
    IN array : ^TlDynamicBuffer,
) : UWORD


// path stuff


EXTERN FN TlMatchPath (
    IN path : ^UBYTE,
    IN pathset : ^UBYTE,
    IN resultingpath : ^TlDynamicBuffer,
    OUT handle : ^VOID,
) : UWORD

EXTERN FN TlCopyParentPath (
    IN srcpath : ^UBYTE,
    IN destpath : ^TlDynamicBuffer,
)

EXTERN FN TlGetFileName (
    IN path : ^UBYTE,
) : ^UBYTE

EXTERN FN TlIsPathDirectory (
    IN path : ^UBYTE,
) : UWORD

EXTERN FN TlPathExists (
    IN path : ^UBYTE,
) : UWORD

FNPTR TlIterateDirectoryCallbackF (
    IN fullpath : ^UBYTE,
    IN filename : ^UBYTE,
    IN context : ^VOID,
)

EXTERN FN TlIterateDirectory (
    IN path : ^UBYTE,
    IN callback : TlIterateDirectoryCallbackF,
    IN context : ^VOID,
) : UWORD

EXTERN FN TlGetPathExtension (
    IN path : ^UBYTE,
) : ^UBYTE

ENUM TlFileType : UBYTE
    TL_FT_DIRECTORY,
    TL_FT_FILE,
END

STRUCT TlStatRecord
    // This struct may seem alarmingly small.
    // Only the fields that are actually needed by a consumer are implemented
    // here (this is the Toolchain Library, not the RTL!).

    FileType : TlFileType,
    ModificationTime : ULONG,
    SizeInBytes : ULONG,
END

EXTERN FN TlStatFile (
    IN path : ^UBYTE,
    IN statrecord : ^TlStatRecord,
) : UWORD

EXTERN FN TlCreateDirectory (
    IN path : ^UBYTE,
) : UWORD

EXTERN FN TlSwitchDirectory (
    IN path : ^UBYTE,
) : UWORD


// zone stuff


#DEFINE TL_ZONE_GROW_BY 32

STRUCT TlZone
    BlockSize : UWORD,
    FreeListHead : ^TlZoneBlockHeader,
END

STRUCT TlZoneBlockHeader
    FreeListNext : ^TlZoneBlockHeader,
END

EXTERN FN TlInitializeZone (
    IN zone : ^TlZone,
    IN blocksize : UWORD,
)

EXTERN FN TlAllocateFromZone (
    IN zone : ^TlZone,
) : ^VOID

EXTERN FN TlFreeToZone (
    IN zone : ^TlZone,
    IN block : ^VOID,
)


// math stuff


EXTERN FN TlIsPowerOfTwo (
    IN constant : UWORD,
) : UWORD

EXTERN FN TlPunchValue (
    IN ptr : ^UBYTE,
    IN value : UWORD,
    IN bytes : UWORD,
)

EXTERN FN TlRotateRight (
    IN value : UWORD,
    IN rotation : UWORD,
    IN bitwidth : UWORD,
) : UWORD


// string stuff


EXTERN FN TlTokenize (
    IN buffer : ^UBYTE,
    IN tokenbuffer : ^UBYTE,
    IN bufsize : UWORD,
    IN delimiter : UBYTE,
) : ^UBYTE

EXTERN FN TlStringToNumber (
    IN src : ^UBYTE,
    IN bufsize : UWORD,
    OUT num : UWORD,
) : UWORD


// multithread and process control stuff


FNPTR TlThreadStartRoutineF (
    IN arg : ^VOID,
)

FNPTR TlTerminationHandlerF ()

EXTERN FN TlSetTerminationHandler (
    IN handler : TlTerminationHandlerF,
)

EXTERN FN TlCreateThread (
    IN startroutine : TlThreadStartRoutineF,
    IN arg : ^VOID,
    OUT thread : ^VOID,
) : TlStatus

EXTERN FN TlJoinThread (
    IN thread : ^VOID,
) : TlStatus

EXTERN FN TlCreateMutex () : ^VOID

EXTERN FN TlAcquireMutex (
    IN mutex : ^VOID,
)

EXTERN FN TlReleaseMutex (
    IN mutex : ^VOID,
)

EXTERN FN TlCreateSemaphore (
    IN initialvalue : UWORD,
) : ^VOID

EXTERN FN TlAcquireSemaphore (
    IN semaphore : ^VOID,
)

EXTERN FN TlReleaseSemaphore (
    IN semaphore : ^VOID,
)

EXTERN FN TlSystem (
    IN cmdline : ^UBYTE,
) : UWORD


// time stuff


EXTERN FN TlCurrentEpochTime () : UWORD


// print stuff


EXTERN TlProgramName : ^UBYTE

EXTERN TlStdErr : ^VOID

FNPTR TlPrintCallbackF (
    IN byte : UBYTE,
    IN context : ^VOID,
)

EXTERN FN TlPrintByCallbackByVarTable (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

EXTERN FN TlPrintByCallback (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN TlPrintByVarTable (
    IN handle : ^VOID,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

EXTERN FN TlPrintByHandle (
    IN handle : ^VOID,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN TlPrint (
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN TlFormatByVarTable (
    IN dest : ^UBYTE,
    IN bufsize : UWORD,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

EXTERN FN TlFormat (
    IN dest : ^UBYTE,
    IN bufsize : UWORD,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN TlError (
    IN fmt : ^UBYTE,
    ... argv argc
)
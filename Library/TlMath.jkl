//
// Math helper routines.
//

#INCLUDE "<inc>/Runtime.hjk"

FN TlIsPowerOfTwo (
    IN constant : UWORD,
) : UWORD

    // Check if the constant is a power of two. If it is, return which Nth power
    // of two it is. If it's not, return -1.

    IF constant == 0 THEN
        RETURN -1
    END

    IF constant & (constant - 1) THEN
        RETURN -1
    END

    // Must be a power of two, figure out which one it is.

    bitpos := 0

    WHILE TRUE DO
        IF constant & 1 THEN
            RETURN bitpos
        END

        constant >>= 1
        bitpos += 1
    END
END

FN TlPunchValue (
    IN ptr : ^UBYTE,
    IN value : UWORD,
    IN bytes : UWORD,
)

    // Punch a value into a byte array. Note: always little-endian.

    WHILE bytes DO
        ptr^ = value

        ptr += 1
        value >>= 8
        bytes -= 1
    END
END

FN TlRotateRight (
    IN value : UWORD,
    IN rotation : UWORD,
    IN bitwidth : UWORD,
) : UWORD

    // Rotate value right.

    rotation &= bitwidth - 1

    RETURN (value >> rotation) | (value << (bitwidth - rotation))
END
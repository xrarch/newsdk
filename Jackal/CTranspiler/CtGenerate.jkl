//
// Implements the IR-to-C transpilation backend.
//

#INCLUDE "<inc>/Backend.hjk"

#IF ( != BLD_BITS 64 )

#ERROR "[BLD] C Transpilation Target requires 64 bit build\n"

#END

// FORWARD
EXTERN FN (JklTargetF) CtTranspile ()

// FORWARD
EXTERN FN (JklValueNumberF) CtValueNumber (
    IN constant : UWORD,
) : UBYTE

CtTargetInfo : JklTargetInfoRecord = {
    [Name] = "CHost",
    [EntryFunc] = &CtTranspile,
    [ValueNumberConstantFunc] = &CtValueNumber,
    [ConstantMask] = 0xFFFFFFFFFFFFFFFF,
    [PointerMask] = 0xFFFFFFFFFFFFFFFF,
    [FoldStackAddr] = FALSE,
    [StackAlignment] = 8,
    [PointerAlignment] = 8,
    [PointerSize] = 8,
    [CodeAlignment] = 1,
    [LargestPrimitive] = PRIM_TYPE_UQUAD,
    [LargestSignedPrimitive] = PRIM_TYPE_QUAD,
    [Bits] = 64,
    [SupportedTypes] = {
        [PRIM_TYPE_VOID] = TRUE,
        [PRIM_TYPE_UBYTE] = TRUE,
        [PRIM_TYPE_UINT] = TRUE,
        [PRIM_TYPE_ULONG] = TRUE,
        [PRIM_TYPE_UQUAD] = TRUE,
        [PRIM_TYPE_BYTE] = TRUE,
        [PRIM_TYPE_INT] = TRUE,
        [PRIM_TYPE_LONG] = TRUE,
        [PRIM_TYPE_QUAD] = TRUE,
    },
    [PrimitiveAlignment] = {
        [PRIM_TYPE_VOID] = 1,
        [PRIM_TYPE_UBYTE] = 1,
        [PRIM_TYPE_UINT] = 2,
        [PRIM_TYPE_ULONG] = 4,
        [PRIM_TYPE_UQUAD] = 8,
        [PRIM_TYPE_BYTE] = 1,
        [PRIM_TYPE_INT] = 2,
        [PRIM_TYPE_LONG] = 4,
        [PRIM_TYPE_QUAD] = 8,
    },
    [PrimitiveSize] = {
        [PRIM_TYPE_VOID] = 0,
        [PRIM_TYPE_UBYTE] = 1,
        [PRIM_TYPE_UINT] = 2,
        [PRIM_TYPE_ULONG] = 4,
        [PRIM_TYPE_UQUAD] = 8,
        [PRIM_TYPE_BYTE] = 1,
        [PRIM_TYPE_INT] = 2,
        [PRIM_TYPE_LONG] = 4,
        [PRIM_TYPE_QUAD] = 8,
    },
}

CtBigBuffer : TlDynamicBuffer

CtFuncBuffer : TlDynamicBuffer

FNPTR CtInsertByteF (
    IN byte : UBYTE,
)

FN CtCopyBytes (
    IN srcbuf : ^UBYTE,
    IN length : UWORD,
)

    // Copy a buffer into the big buffer.

    TlCopyIntoDynamicBuffer (
        &CtBigBuffer, // array
        srcbuf, // srcbuf
        length, // length
    )
END

FN CtInsertString (
    IN string : ^UBYTE,
)

    // Insert a string into the big buffer.

    TlCopyIntoDynamicBuffer (
        &CtBigBuffer, // array
        string, // srcbuf
        TlMeasureString ( string ), // length
    )
END

FN (CtInsertByteF) CtInsertByte (
    IN byte : UBYTE,
)
    
    // Insert a single byte into the big buffer.

    TlInsertDynamicBuffer (
        &CtBigBuffer, // array
        byte, // byte
    )
END

FN CtInsertNumber (
    IN number : UWORD,
)

    // Insert a number into the big buffer.

    TlInsertNumberDynamicBuffer (
        &CtBigBuffer, // array
        number, // number
        10, // base
    )
END

FN CtCopyBytesFunc (
    IN srcbuf : ^UBYTE,
    IN length : UWORD,
)

    // Copy a buffer into the func buffer.

    TlCopyIntoDynamicBuffer (
        &CtFuncBuffer, // array
        srcbuf, // srcbuf
        length, // length
    )
END

FN CtInsertStringFunc (
    IN string : ^UBYTE,
)

    // Insert a string into the func buffer.

    TlCopyIntoDynamicBuffer (
        &CtFuncBuffer, // array
        string, // srcbuf
        TlMeasureString ( string ), // length
    )
END

FN (CtInsertByteF) CtInsertByteFunc (
    IN byte : UBYTE,
)
    
    // Insert a single byte into the func buffer.

    TlInsertDynamicBuffer (
        &CtFuncBuffer, // array
        byte, // byte
    )
END

FN CtInsertNumberFunc (
    IN number : UWORD,
)

    // Insert a number into the func buffer.

    TlInsertNumberDynamicBuffer (
        &CtFuncBuffer, // array
        number, // number
        10, // base
    )
END

CtTypeNames : ^UBYTE[PRIM_TYPE_MAX] = {
    [PRIM_TYPE_BYTE] = "int8_t",
    [PRIM_TYPE_INT] = "int16_t",
    [PRIM_TYPE_LONG] = "int32_t",
    [PRIM_TYPE_QUAD] = "int64_t",

    [PRIM_TYPE_UBYTE] = "uint8_t",
    [PRIM_TYPE_UINT] = "uint16_t",
    [PRIM_TYPE_ULONG] = "uint32_t",
    [PRIM_TYPE_UQUAD] = "uint64_t",

    [PRIM_TYPE_POINTER] = "uintptr_t",
}

CtIrVariableNumber := 1

FN CtOutputSymbolName (
    IN sym : ^LexSymbol,
)

    // Output the mangled name of a local symbol.

    IF NOT sym^.TrgContext THEN
        // Declare the local.

        sym^.TrgContext = CAST CtIrVariableNumber TO ^VOID
        CtIrVariableNumber += 1

        type := sym^.SemanticType

        // Skip names.

        WHILE type^.Subtype == TYPE_NAMED DO
            type = type^.Body.Named.Symbol^.SemanticType
        END

        primtype : JklPrimitiveType
        bound := 0

        IF type^.Subtype == TYPE_ARRAY OR type^.Subtype == TYPE_COMPOUND THEN
            bound = type^.Size
            primtype = PRIM_TYPE_POINTER

        ELSEIF type^.Subtype == TYPE_POINTER THEN
            primtype = PRIM_TYPE_POINTER

        ELSEIF type^.Subtype == TYPE_PRIMITIVE THEN
            primtype = type^.Body.Primitive.Type

        ELSE
            TlInternalError ( "Didn't expect this type here", type^.Subtype, 0, 0 )
        END

        CtInsertString ( "    uintptr_t _mng_" )
        CtInsertString ( sym^.Name )
        CtInsertNumber ( CAST sym^.TrgContext TO UWORD )

        IF bound THEN
            CtInsertByte ( '[' )
            CtInsertNumber ( ((bound + 7) & ~7) / 8 )
            CtInsertByte ( ']' )
        END

        CtInsertString ( ";\n" )
    END

    CtInsertStringFunc ( "_mng_" )
    CtInsertStringFunc ( sym^.Name )
    CtInsertNumberFunc ( CAST sym^.TrgContext TO UWORD )
END

FN CtOutputVariableName (
    IN var : ^IrVariable,
)

    // Output the name of an IR variable.

    IF var^.Symbol THEN
        CtOutputSymbolName ( var^.Symbol )

        LEAVE
    END

    IF var^.Number THEN
        CtInsertStringFunc ( "__twr_v" )
        CtInsertNumberFunc ( var^.Number )

        LEAVE
    END

    var^.Number = CtIrVariableNumber
    CtIrVariableNumber += 1

    // Generate a declaration for the variable.

    CtInsertString ( "    uintptr_t __twr_v" )
    CtInsertNumber ( var^.Number )
    CtInsertString ( ";\n" )

    CtInsertStringFunc ( "__twr_v" )
    CtInsertNumberFunc ( var^.Number )
END

FN CtOutputLabelName (
    IN label : ^IrInstruction,
)

    // Output the name of a label.

    IF label^.Body.Label.Symbol THEN
        CtInsertStringFunc ( "__twr_l" )
        CtInsertStringFunc ( label^.Body.Label.Symbol^.Name )

        LEAVE
    END

    CtInsertStringFunc ( "__twr_l" )
    CtInsertNumberFunc ( label^.Body.Label.Number )
END

FN CtOutputEnd ()

    // Output the end of a C statement.

    CtInsertStringFunc ( ";\n" )
END

FN CtGenerateString (
    IN func : UBYTE,
    IN string : ^LexInternedString,
)

    // Generate a string.

    buffer := string^.DynamicBuffer.Buffer
    count := string^.DynamicBuffer.Count - 1
    i := 0

    insbyte := &CtInsertByte

    IF func THEN
        insbyte = &CtInsertByteFunc
    END

    insbyte ( '"' )

    WHILE i < count DO
        IF buffer[i] == '\n' THEN
            insbyte ( 92 )
            insbyte ( 'n' )

        ELSEIF buffer[i] == '\t' THEN
            insbyte ( 92 )
            insbyte ( 't' )

        ELSEIF buffer[i] == '\r' THEN
            insbyte ( 92 )
            insbyte ( 'r' )

        ELSEIF buffer[i] == '\b' THEN
            insbyte ( 92 )
            insbyte ( 'b' )

        ELSEIF buffer[i] == '"' THEN
            insbyte ( 92 )
            insbyte ( '"' )

        ELSEIF buffer[i] == '\\' THEN
            insbyte ( 92 )
            insbyte ( 92 )

        ELSEIF buffer[i] == '\[' THEN
            insbyte ( 92 )
            insbyte ( 'x' )
            insbyte ( '1' )
            insbyte ( 'B' )

        ELSE
            insbyte ( buffer[i] )
        END

        i += 1
    END

    insbyte ( '"' )
END

FNPTR CtGenerateF (
    IN inst : ^IrInstruction,
)

FN (CtGenerateF) CtGenerateLabel (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputLabelName ( inst )
    CtInsertStringFunc ( ":;\n" )
END

FN (CtGenerateF) CtGenerateJump (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    goto " )
    CtOutputLabelName ( inst^.Body.Jump.Label )
    CtOutputEnd ()
END

FN (CtGenerateF) CtGenerateLoad (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = *(" )
    CtInsertStringFunc ( CtTypeNames[inst^.Body.LoadStore.Type] )
    CtInsertStringFunc ( "*)(" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ");\n" )
END

FN (CtGenerateF) CtGenerateAddr (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = (uintptr_t)(&" )
    CtInsertStringFunc ( inst^.Body.Addr.Symbol^.Name )
    CtInsertStringFunc ( ");\n" )
END

FN (CtGenerateF) CtGenerateStackAddr (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = (uintptr_t)(&" )
    CtOutputSymbolName ( inst^.Body.Addr.Symbol )
    CtInsertStringFunc ( ");\n" )
END

FN (CtGenerateF) CtGenerateStringAddr (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = (uintptr_t)(&" )
    CtGenerateString ( TRUE, inst^.Body.String.String )
    CtInsertStringFunc ( ");\n" )
END

FN (CtGenerateF) CtGenerateConstant (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = " )
    CtInsertNumberFunc ( inst^.Body.Constant.Constant )
    CtInsertStringFunc ( "ULL" )
    CtInsertStringFunc ( ";\n" )
END

FN (CtGenerateF) CtGenerateBranchNonZero (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    if (" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ") { goto " )
    CtOutputLabelName ( inst^.Body.Branch.TrueLabel )
    CtInsertStringFunc ( "; } else { goto " )
    CtOutputLabelName ( inst^.Body.Branch.FalseLabel )
    CtInsertStringFunc ( "; }\n" )
END

FN (CtGenerateF) CtGenerateBranchZero (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    if (!(" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ")) { goto " )
    CtOutputLabelName ( inst^.Body.Branch.TrueLabel )
    CtInsertStringFunc ( "; } else { goto " )
    CtOutputLabelName ( inst^.Body.Branch.FalseLabel )
    CtInsertStringFunc ( "; }\n" )
END

FN (CtGenerateF) CtGenerateReturn (
    IN inst : ^IrInstruction,
)

    IF inst^.Source1 THEN
        CtInsertStringFunc ( "    _jkl_retv = " )

        CtOutputVariableName ( inst^.Source1 )

        CtInsertStringFunc ( ";\n" )
    END

    CtInsertStringFunc ( "    goto _jkl_epilogue;\n" )
END

FN (CtGenerateF) CtGenerateMove (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = " )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ";\n" )
END

FN (CtGenerateF) CtGenerateNot (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = !" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ";\n" )
END

FN CtGenerateBranch (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    // Generate a branch.

    CtInsertStringFunc ( "    if (" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( " " )
    CtInsertStringFunc ( string )
    CtInsertStringFunc ( " " )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( ") { goto " )
    CtOutputLabelName ( inst^.Body.Branch.TrueLabel )
    CtInsertStringFunc ( "; } else { goto " )
    CtOutputLabelName ( inst^.Body.Branch.FalseLabel )
    CtInsertStringFunc ( "; }\n" )
END

FN CtGenerateCmp (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    // Generate a comparison.

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = (" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( " " )
    CtInsertStringFunc ( string )
    CtInsertStringFunc ( " " )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( ");\n" )
END

FN CtGenerateSignedBranch (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    // Generate a signed branch.

    CtInsertStringFunc ( "    if ((int64_t)(" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ") " )
    CtInsertStringFunc ( string )
    CtInsertStringFunc ( " (int64_t)(" )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( ")) { goto " )
    CtOutputLabelName ( inst^.Body.Branch.TrueLabel )
    CtInsertStringFunc ( "; } else { goto " )
    CtOutputLabelName ( inst^.Body.Branch.FalseLabel )
    CtInsertStringFunc ( "; }\n" )
END

FN CtGenerateSignedCmp (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    // Generate a signed comparison.

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = ((int64_t)(" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ") " )
    CtInsertStringFunc ( string )
    CtInsertStringFunc ( " (int64_t)(" )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( "));\n" )
END

FN (CtGenerateF) CtGenerateBranchEquals (
    IN inst : ^IrInstruction,
)

    CtGenerateBranch (
        inst, // inst
        "==", // string
    )
END

FN (CtGenerateF) CtGenerateCmpEquals (
    IN inst : ^IrInstruction,
)

    CtGenerateCmp (
        inst, // inst
        "==", // string
    )
END

FN (CtGenerateF) CtGenerateBranchNotEquals (
    IN inst : ^IrInstruction,
)

    CtGenerateBranch (
        inst, // inst
        "!=", // string
    )
END

FN (CtGenerateF) CtGenerateCmpNotEquals (
    IN inst : ^IrInstruction,
)

    CtGenerateCmp (
        inst, // inst
        "!=", // string
    )
END

FN (CtGenerateF) CtGenerateBranchLessThan (
    IN inst : ^IrInstruction,
)

    CtGenerateBranch (
        inst, // inst
        "<", // string
    )
END

FN (CtGenerateF) CtGenerateCmpLessThan (
    IN inst : ^IrInstruction,
)

    CtGenerateCmp (
        inst, // inst
        "<", // string
    )
END

FN (CtGenerateF) CtGenerateBranchGreaterThan (
    IN inst : ^IrInstruction,
)

    CtGenerateBranch (
        inst, // inst
        ">", // string
    )
END

FN (CtGenerateF) CtGenerateCmpGreaterThan (
    IN inst : ^IrInstruction,
)

    CtGenerateCmp (
        inst, // inst
        ">", // string
    )
END

FN (CtGenerateF) CtGenerateBranchLtEq (
    IN inst : ^IrInstruction,
)

    CtGenerateBranch (
        inst, // inst
        "<=", // string
    )
END

FN (CtGenerateF) CtGenerateCmpLtEq (
    IN inst : ^IrInstruction,
)

    CtGenerateCmp (
        inst, // inst
        "<=", // string
    )
END

FN (CtGenerateF) CtGenerateBranchGtEq (
    IN inst : ^IrInstruction,
)

    CtGenerateBranch (
        inst, // inst
        ">=", // string
    )
END

FN (CtGenerateF) CtGenerateCmpGtEq (
    IN inst : ^IrInstruction,
)

    CtGenerateCmp (
        inst, // inst
        ">=", // string
    )
END

FN (CtGenerateF) CtGenerateBranchLtSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedBranch (
        inst, // inst
        "<", // string
    )
END

FN (CtGenerateF) CtGenerateCmpLtSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedCmp (
        inst, // inst
        "<", // string
    )
END

FN (CtGenerateF) CtGenerateBranchGtSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedBranch (
        inst, // inst
        ">", // string
    )
END

FN (CtGenerateF) CtGenerateCmpGtSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedCmp (
        inst, // inst
        ">", // string
    )
END

FN (CtGenerateF) CtGenerateBranchLtEqSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedBranch (
        inst, // inst
        "<=", // string
    )
END

FN (CtGenerateF) CtGenerateCmpLtEqSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedCmp (
        inst, // inst
        "<=", // string
    )
END

FN (CtGenerateF) CtGenerateBranchGtEqSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedBranch (
        inst, // inst
        ">=", // string
    )
END

FN (CtGenerateF) CtGenerateCmpGtEqSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedCmp (
        inst, // inst
        ">=", // string
    )
END

FN CtGenerateArithmetic (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = " )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( " " )
    CtInsertStringFunc ( string )
    CtInsertStringFunc ( " " )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( ";\n" )
END

FN CtGenerateSignedArithmetic (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = (int64_t)(" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ") " )
    CtInsertStringFunc ( string )
    CtInsertStringFunc ( " (int64_t)(" )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( ");\n" )
END

FN CtGenerateUnaryArithmetic (
    IN inst : ^IrInstruction,
    IN string : ^UBYTE,
)

    CtInsertStringFunc ( "    " )
    CtOutputVariableName ( inst^.Defines )
    CtInsertStringFunc ( " = " )
    CtInsertStringFunc ( string )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ";\n" )
END

FN (CtGenerateF) CtGenerateBitAnd (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "&", // string
    )
END

FN (CtGenerateF) CtGenerateBitOr (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "|", // string
    )
END

FN (CtGenerateF) CtGenerateAdd (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "+", // string
    )
END

FN (CtGenerateF) CtGenerateSubtract (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "-", // string
    )
END

FN (CtGenerateF) CtGenerateDivide (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "/", // string
    )
END

FN (CtGenerateF) CtGenerateDivideSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedArithmetic (
        inst, // inst
        "/", // string
    )
END

FN (CtGenerateF) CtGenerateModulo (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "%", // string
    )
END

FN (CtGenerateF) CtGenerateBitXor (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "^", // string
    )
END

FN (CtGenerateF) CtGenerateLeftShift (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "<<", // string
    )
END

FN (CtGenerateF) CtGenerateRightShift (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        ">>", // string
    )
END

FN (CtGenerateF) CtGenerateRightShiftSigned (
    IN inst : ^IrInstruction,
)

    CtGenerateSignedArithmetic (
        inst, // inst
        ">>", // string
    )
END

FN (CtGenerateF) CtGenerateBitNot (
    IN inst : ^IrInstruction,
)

    CtGenerateUnaryArithmetic (
        inst, // inst
        "~", // string
    )
END

FN (CtGenerateF) CtGenerateMul (
    IN inst : ^IrInstruction,
)

    CtGenerateArithmetic (
        inst, // inst
        "*", // string
    )
END

FN (CtGenerateF) CtGenerateCall (
    IN inst : ^IrInstruction,
)

    // Generate a function call.

    // This is mostly straightforward except for one little thing which is
    // varargs. We implement them simply by creating an array of uintptr_t to
    // contain the variadic part, and passing a pointer to that, along with a
    // count, as the last two arguments of the function call.

    callnode := inst^.Body.Call.CallNode
    type := PrsEvaluateType ( callnode^.Body.Operator.Left )

    cargcount := type^.Body.Function.ArgCount
    varargcount := callnode^.Body.Operator.VarArgCount

    IF type^.Body.Function.IsVarArg THEN
        cargcount += 2
    END

    CtInsertStringFunc ( "    " )

    IF type^.Body.Function.ReturnType THEN
        CtOutputVariableName ( inst^.Defines )
        CtInsertStringFunc ( " = " )
    END

    // Now we have to do something kind of evil which is to cast the function
    // pointer according to the number of arguments, and then call through it.

    CtInsertStringFunc ( "((" )

    IF type^.Body.Function.ReturnType THEN
        CtInsertStringFunc ( "uintptr_t " )
    ELSE
        CtInsertStringFunc ( "void " )
    END

    CtInsertStringFunc ( "(*)(" )

    WHILE cargcount DO
        CtInsertStringFunc ( "uintptr_t" )

        cargcount -= 1

        IF cargcount THEN
            CtInsertStringFunc ( ", " )
        END
    END

    CtInsertStringFunc ( "))" )

    CtOutputVariableName ( inst^.Source1 )

    CtInsertStringFunc ( ")(" )

    arg := inst^.Body.Call.ArgListHead
    outarg := inst^.Body.Call.OutListHead

    WHILE arg DO
        CtOutputVariableName ( arg^.Variable )

        arg = arg^.Next

        IF arg OR outarg THEN
            CtInsertStringFunc ( ", " )
        END
    END

    WHILE outarg DO
        CtInsertStringFunc ( "(uintptr_t)(&" )
        CtOutputVariableName ( outarg^.Variable )
        CtInsertStringFunc ( ")" )

        outarg = outarg^.Next

        IF outarg THEN
            CtInsertStringFunc ( ", " )
        END
    END

    CtInsertStringFunc ( ");\n" )
END

FN (CtGenerateF) CtGenerateStore (
    IN inst : ^IrInstruction,
)

    CtInsertStringFunc ( "    *(" )
    CtInsertStringFunc ( CtTypeNames[inst^.Body.LoadStore.Type] )
    CtInsertStringFunc ( "*)(" )
    CtOutputVariableName ( inst^.Source1 )
    CtInsertStringFunc ( ") = " )
    CtOutputVariableName ( inst^.Source2 )
    CtInsertStringFunc ( ";\n" )
END

FN (CtGenerateF) CtGenerateNothing (
    IN inst : ^IrInstruction,
)

    // Do absolutely nothing.
END

CtGenerateInstructionFunctions : CtGenerateF[IR_MAX] = {
    [IR_LABEL] = &CtGenerateLabel,
    [IR_JUMP] = &CtGenerateJump,
    [IR_LOAD] = &CtGenerateLoad,
    [IR_ADDR] = &CtGenerateAddr,
    [IR_STACK_ADDR] = &CtGenerateStackAddr,
    [IR_STRING_ADDR] = &CtGenerateStringAddr,
    [IR_CONSTANT] = &CtGenerateConstant,
    [IR_BRANCH_NONZERO] = &CtGenerateBranchNonZero,
    [IR_BRANCH_ZERO] = &CtGenerateBranchZero,
    [IR_RETURN] = &CtGenerateReturn,
    [IR_MOVE] = &CtGenerateMove,
    [IR_NOT] = &CtGenerateNot,
    [IR_BRANCH_EQUALS] = &CtGenerateBranchEquals,
    [IR_COMPARE_EQUALS] = &CtGenerateCmpEquals,
    [IR_BRANCH_NOT_EQUALS] = &CtGenerateBranchNotEquals,
    [IR_COMPARE_NOT_EQUALS] = &CtGenerateCmpNotEquals,
    [IR_BRANCH_LESS_THAN] = &CtGenerateBranchLessThan,
    [IR_COMPARE_LESS_THAN] = &CtGenerateCmpLessThan,
    [IR_BRANCH_GREATER_THAN] = &CtGenerateBranchGreaterThan,
    [IR_COMPARE_GREATER_THAN] = &CtGenerateCmpGreaterThan,
    [IR_BRANCH_LTEQ] = &CtGenerateBranchLtEq,
    [IR_COMPARE_LTEQ] = &CtGenerateCmpLtEq,
    [IR_BRANCH_GTEQ] = &CtGenerateBranchGtEq,
    [IR_COMPARE_GTEQ] = &CtGenerateCmpGtEq,
    [IR_BRANCH_LESS_THAN_SIGNED] = &CtGenerateBranchLtSigned,
    [IR_COMPARE_LESS_THAN_SIGNED] = &CtGenerateCmpLtSigned,
    [IR_BRANCH_GREATER_THAN_SIGNED] = &CtGenerateBranchGtSigned,
    [IR_COMPARE_GREATER_THAN_SIGNED] = &CtGenerateCmpGtSigned,
    [IR_BRANCH_LTEQ_SIGNED] = &CtGenerateBranchLtEqSigned,
    [IR_COMPARE_LTEQ_SIGNED] = &CtGenerateCmpLtEqSigned,
    [IR_BRANCH_GTEQ_SIGNED] = &CtGenerateBranchGtEqSigned,
    [IR_COMPARE_GTEQ_SIGNED] = &CtGenerateCmpGtEqSigned,
    [IR_BIT_AND] = &CtGenerateBitAnd,
    [IR_BIT_OR] = &CtGenerateBitOr,
    [IR_ADD] = &CtGenerateAdd,
    [IR_SUBTRACT] = &CtGenerateSubtract,
    [IR_DIVIDE] = &CtGenerateDivide,
    [IR_DIVIDE_SIGNED] = &CtGenerateDivideSigned,
    [IR_MODULO] = &CtGenerateModulo,
    [IR_BIT_XOR] = &CtGenerateBitXor,
    [IR_LEFT_SHIFT] = &CtGenerateLeftShift,
    [IR_RIGHT_SHIFT] = &CtGenerateRightShift,
    [IR_RIGHT_SHIFT_SIGNED] = &CtGenerateRightShiftSigned,
    [IR_BIT_NOT] = &CtGenerateBitNot,
    [IR_MULTIPLY] = &CtGenerateMul,
    [IR_CALL] = &CtGenerateCall,
    [IR_STORE] = &CtGenerateStore,
    [IR_BARRIER] = &CtGenerateNothing,
}

FN CtGenerateIrInst (
    IN inst : ^IrInstruction,
)

    // Generate C for an IR instruction.

    CtGenerateInstructionFunctions[inst^.Type] (
        inst, // inst
    )
END

FN CtGenerateFromIr (
    IN irfunc : ^IrFunction,
)

    // Generate C for an IR function.

    TlUninitializeDynamicBuffer ( &CtFuncBuffer )
    TlInitializeDynamicBuffer ( &CtFuncBuffer )

    inst := irfunc^.Head

    WHILE inst DO
        CtGenerateIrInst ( inst )

        inst = inst^.Next
    END

    CtCopyBytes (
        CtFuncBuffer.Buffer, // srcbuf
        CtFuncBuffer.Count, // length
    )
END

FN CtGenerateArgList (
    IN type : ^LexSemanticType,
    IN inout : LexFunctionArgumentTypes,
    IN count : UWORD,
) : UWORD

    // Generate an argument list.

    arg := type^.Body.Function.ArgListHead

    WHILE arg DO
        IF arg^.InOut == inout THEN
            IF inout == ARG_OUT THEN
                CtInsertString ( "uintptr_t _mng_o_" )
                CtInsertString ( arg^.Symbol^.Name )
            
            ELSE
                arg^.Symbol^.TrgContext = CAST CtIrVariableNumber TO ^VOID
                CtIrVariableNumber += 1

                CtInsertString ( "uintptr_t _mng_" )
                CtInsertString ( arg^.Symbol^.Name )
                CtInsertNumber ( CAST arg^.Symbol^.TrgContext TO UWORD )
            END

            arg = arg^.Next

            count -= 1

            IF count THEN
                CtInsertString ( ", " )
            END

        ELSE
            arg = arg^.Next
        END
    END

    RETURN count
END

FN CtGenerateFunction (
    IN sym : ^LexSymbol,
)

    // Generate C for a function declaration.

    type := sym^.SemanticType

    returntype := type^.Body.Function.ReturnType

    IF returntype THEN
        CtInsertString ( "uintptr_t " )

    ELSE
        CtInsertString ( "void " )
    END

    CtInsertString ( sym^.Name )

    CtInsertString ( "(" )

    count := type^.Body.Function.ArgCount

    IF type^.Body.Function.IsVarArg THEN
        count += 1
    END

    // Generate the argument list one IN/OUT type at a time, because the
    // argument list has them jumbled up, but the IR list has two lists, so OUT
    // parameters always end up sorted to the end.

    count = CtGenerateArgList (
        type, // type
        ARG_IN, // inout
        count, // count
    )

    IF type^.Body.Function.IsVarArg THEN
        count -= 1

        vtsym := type^.Body.Function.VarArgTable
        vcsym := type^.Body.Function.VarArgCount

        vtsym^.TrgContext = CAST CtIrVariableNumber TO ^VOID
        CtIrVariableNumber += 1

        vcsym^.TrgContext = CAST CtIrVariableNumber TO ^VOID
        CtIrVariableNumber += 1

        CtInsertString ( "uintptr_t _mng_" )
        CtInsertString ( vtsym^.Name )
        CtInsertNumber ( CAST vtsym^.TrgContext TO UWORD )

        CtInsertString ( ", uintptr_t _mng_" )
        CtInsertString ( vcsym^.Name )
        CtInsertNumber ( CAST vcsym^.TrgContext TO UWORD )

        IF count THEN
            CtInsertString ( ", " )
        END
    END

    CtGenerateArgList (
        type, // type
        ARG_OUT, // inout
        count, // count
    )

    CtInsertString ( ")" )

    body := type^.Body.Function.BodyBlock

    IF NOT body THEN
        CtInsertString ( ";\n" )

        LEAVE
    END

    CtInsertString ( " {\n" )

    IF type^.Body.Function.ReturnType THEN
        CtInsertString ( "    uintptr_t _jkl_retv;\n" )
    END

    CtGenerateFromIr (
        CAST sym^.InitialValue TO ^IrFunction, // irfunc
    )

    CtInsertString ( "    _jkl_epilogue:;\n" )

    arg := type^.Body.Function.ArgListHead

    WHILE arg DO
        IF arg^.InOut == ARG_OUT AND
            arg^.Symbol^.TrgContext THEN

            // Generate a store of this argument back to the caller.

            CtInsertString ( "    *(uintptr_t*)(_mng_o_" )
            CtInsertString ( arg^.Symbol^.Name )
            CtInsertString ( ") = " )
            CtInsertString ( "_mng_" )
            CtInsertString ( arg^.Symbol^.Name )
            CtInsertNumber ( CAST arg^.Symbol^.TrgContext TO UWORD )
            CtInsertString ( ";\n" )
        END

        arg = arg^.Next
    END

    IF type^.Body.Function.ReturnType THEN
        CtInsertString ( "    return _jkl_retv;\n" )
    END

    CtInsertString ( "}\n" )
END

// FORWARD
EXTERN FN CtGenerateInitializer (
    IN value : ^PrsAstNode,
    IN primtype : JklPrimitiveType,
    IN count : ULONG,
)

FN CtGenerateCompoundInitializer (
    IN node : ^PrsAstNode,
    IN count : ULONG,
)

    // Generate a compound data type initializer.

    contentsarray := &node^.Body.Initializer.ContentsArray
    backpatcharray := &node^.Body.Initializer.BackpatchArray
    bparray := CAST backpatcharray^.Array TO ^^PrsAstNode

    i := 0

    CtInsertString ( "{\n" )

    WHILE i < count DO
        // For each 8 bytes we want to insert a quad into the array.
        // Note that the parser rounds up the byte array and bp array to the
        // next multiple of 8.

        IF i < backpatcharray^.LengthInUnits AND bparray[i] THEN
            CtInsertString ( "    " )

            CtGenerateInitializer (
                bparray[i], // value
                PRIM_TYPE_POINTER, // primtype
                0, // count
            )

        ELSEIF i < contentsarray^.LengthInUnits THEN
            CtInsertString ( "    0x" )

            j := 8

            WHILE j DO
                j -= 1

                byte : UBYTE = contentsarray^.Array[i + j]

                lonibble := byte & 0xF
                hinibble := byte >> 4

                IF hinibble < 10 THEN
                    CtInsertByte ( '0' + hinibble )
                ELSE
                    CtInsertByte ( 'A' + hinibble - 10 )
                END

                IF lonibble < 10 THEN
                    CtInsertByte ( '0' + lonibble )
                ELSE
                    CtInsertByte ( 'A' + lonibble - 10 )
                END
            END

        ELSE
            CtInsertString ( "    0x0000000000000000" )
        END

        CtInsertString ( ",\n" )

        i += 8
    END

    CtInsertString ( "}" )
END

FN CtGenerateInitializer (
    IN value : ^PrsAstNode,
    IN primtype : JklPrimitiveType,
    IN count : ULONG,
)

    // Generate C for an initializer.

    // First skip any casts.

    WHILE value^.Type == AST_OPERATOR AND value^.Token.Subtype == TOKEN_CAST DO
        value = value^.Body.Operator.Left
    END

    // Because the value has to be known at compile time, there are only a
    // handful of options for what this could be.

    // 1. A constant.

    IF value^.Type == AST_CONSTANT THEN
        CtInsertNumber ( value^.Body.Constant.Value )
        CtInsertString ( "ULL" )

        LEAVE
    END

    // 2. A string.

    IF value^.Type == AST_STRING THEN
        CtInsertByte ( '(' )

        CtInsertString ( CtTypeNames[primtype] )

        CtInsertString ( ")(&" )

        CtGenerateString (
            FALSE, // func
            CAST value^.Token.Payload TO ^LexInternedString, // string
        )

        CtInsertByte ( ')' )

        LEAVE
    END

    // 3. A fancy initializer.

    IF value^.Type == AST_INITIALIZER THEN
        CtGenerateCompoundInitializer (
            value, // node
            count, // count
        )

        LEAVE
    END

    // 4. An address of an identifier.

    IF value^.Type == AST_OPERATOR AND
        value^.Token.Subtype == TOKEN_ADDROF THEN

        CtInsertByte ( '(' )

        CtInsertString ( CtTypeNames[primtype] )

        CtInsertString ( ")(&" )

        id := CAST value^.Body.Operator.Left^.Token.Payload TO ^LexSymbol

        CtInsertString ( id^.Name )

        CtInsertByte ( ')' )

        LEAVE
    END

    TlInternalError ( "Didn't expect this value here", value^.Type, 0, 0 )
END

FN CtGenerateGlobal (
    IN sym : ^LexSymbol,
)

    // Generate C for a global definition.

    IF sym^.Flags == VAR_FLAG_EXTERN THEN
        CtInsertString ( "extern " )
    END

    type := sym^.SemanticType

    // Skip names.

    WHILE type^.Subtype == TYPE_NAMED DO
        type = type^.Body.Named.Symbol^.SemanticType
    END

    primtype : JklPrimitiveType
    bound := 0

    IF type^.Subtype == TYPE_FUNCTION THEN
        CtGenerateFunction ( sym )

        LEAVE
    END

    IF type^.Subtype == TYPE_ARRAY OR type^.Subtype == TYPE_COMPOUND THEN
        bound = type^.Size
        primtype = PRIM_TYPE_POINTER

    ELSEIF type^.Subtype == TYPE_POINTER THEN
        primtype = PRIM_TYPE_POINTER

    ELSEIF type^.Subtype == TYPE_PRIMITIVE THEN
        primtype = type^.Body.Primitive.Type

    ELSE
        TlInternalError ( "Didn't expect this type here", type^.Subtype, 0, 0 )
    END

    CtInsertString ( CtTypeNames[primtype] )

    CtInsertByte ( ' ' )

    CtInsertString ( sym^.Name )

    IF bound THEN
        CtInsertByte ( '[' )
        CtInsertNumber ( ((bound + 7) & ~7) / 8 )
        CtInsertByte ( ']' )
    END

    IF sym^.InitialValue THEN
        CtInsertString ( " = " )

        CtGenerateInitializer (
            CAST sym^.InitialValue TO ^PrsAstNode, // value
            primtype, // primtype
            (bound + 7) & ~7, // count
        )
    END

    CtInsertString ( ";\n" )
END

FN (JklValueNumberF) CtValueNumber (
    IN constant : UWORD,
) : UBYTE

    // Return whether to value number this constant.
    // Doing this too much could create too many callee-saved registers if the
    // constant is live over a function call. Doing it too little will
    // recompute large constants too much.

    // Always value number constants on the C transpilation target, to reduce
    // output size.

    RETURN TRUE
END

FN (JklTargetF) CtTranspile ()

    // Initialize the dynamic buffer that will contain the output text.

    TlInitializeDynamicBuffer ( &CtBigBuffer )

    TlInitializeDynamicBuffer ( &CtFuncBuffer )

    // Include the header that gives us standard sizes like uint8_t.

    CtInsertString ( "#include <stdint.h>\n" )

    // For each global, generate C.

    sym := PrsGlobalListHead

    WHILE sym DO
        CtGenerateGlobal ( sym )

        sym = sym^.Next
    END

    // Output the contents of the buffer to the destination file.

    TlWriteFile (
        FeOutputFileHandle, // handle
        CtBigBuffer.Count, // bytes
        CtBigBuffer.Buffer, // buffer
    )
END
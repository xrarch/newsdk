#INCLUDE "<inc>/Backend.hjk"

STRUCT LirFoxOperand
    Constant : UWORD,
    AccessType : UBYTE,
END

STRUCT LirFoxSpecific
    Op1 : LirFoxOperand,
    Op2 : LirFoxOperand,

    Condition : UBYTE,
    BitSize : UBYTE,
END

STRUCT LirXrOperand
    Constant : UWORD,
    AccessType : UBYTE,
END

STRUCT LirXrSpecific
    Op1 : LirXrOperand,
    Op2 : LirXrOperand,
    Op3 : LirXrOperand,

    BitSize : UBYTE,
    ShiftType : UBYTE,
    ShiftAmount : UBYTE,
END

UNION LirMachineSpecific
#IF TRG_FOX32
    Fox : LirFoxSpecific,
#END
#IF TRG_XR17032
    Xr : LirXrSpecific,
#END
END

ENUM LirInstructionType : UBYTE
    LIR_MIN, // MUST be at the start

    LIR_LABEL,
    LIR_CALL,
    LIR_MACH_INST,
    LIR_RETURN,
    LIR_BRANCH,
    LIR_INSERTASM,
    LIR_JUNK,

    LIR_MAX, // MUST be at the end
END

ENUM LirRegisterType : UBYTE
    LIR_MACHINE_REG,
    LIR_VIRTUAL_REG,
    LIR_SPILLED_REG,
    LIR_PREALLOCATED_REG,
END

STRUCT LirRegister
    Symbol : ^LexSymbol,

    IntervalListEntry : TlListEntry,
    DefinedYetListEntry : TlListEntry,

    LivenessFirst : ^LirInstruction,

    HintToVirtual : ^LirRegister,

    SpilledOffset : ULONG,

    LivenessStart : ULONG,
    LivenessEnd : ULONG,

    DefinedYet : UBYTE,
    LiveAcrossCall : UBYTE,
    Active : UBYTE,

    MachineRegister : UBYTE,
    Hint : UBYTE,
    Type : LirRegisterType,
    MachineRegisterBitmap : UBYTE[(IR_MACHINE_REG_MAX + 7) / 8],
END

STRUCT LirLabelBody
    References : ULONG,
    Number : ULONG,
    GenCount : ULONG,
END

STRUCT LirInsertAsmBody
    String : ^LexInternedString,
END

UNION LirInstructionBody
    Machine : LirMachineSpecific,
    Label : LirLabelBody,
    InsertAsm : LirInsertAsmBody,
END

STRUCT LirArgument
    Next : ^LirArgument,
    Register : ^LirRegister,
END

STRUCT LirInstructionCallBody
    ArgListHead : ^LirArgument,
    OutListHead : ^LirArgument,
END

STRUCT LirInstructionBranchBody
    Label : ^LirInstruction,
END

UNION LirInstructionTypeBody
    Call : LirInstructionCallBody,
    Branch : LirInstructionBranchBody,
END

STRUCT LirInstruction
    Next : ^LirInstruction,
    Prev : ^LirInstruction,
    Block : ^IrFunction,

    Defines : ^LirRegister,
    Source1 : ^LirRegister,
    Source2 : ^LirRegister,
    Source3 : ^LirRegister,

    Body : LirInstructionBody,

    TypeBody : LirInstructionTypeBody,

    MachineInstruction : UBYTE,
    Type : LirInstructionType,
END

FNPTR LirSelectF (
    IN inst : ^IrInstruction,
) : ^LirRegister

EXTERN FN LirCreateInstruction (
    IN type : LirInstructionType,
    IN machtype : UBYTE,
) : ^LirInstruction

EXTERN FN LirInsertInstructionTail (
    IN lirinst : ^LirInstruction,
)

EXTERN FN LirRemoveInstruction (
    IN lirinst : ^LirInstruction,
)

EXTERN FN LirGetLabel (
    IN oldlabel : ^IrInstruction,
) : ^LirInstruction

EXTERN FN LirCreateRegister () : ^LirRegister

EXTERN FN LirGetRegister (
    IN oldvariable : ^IrVariable,
) : ^LirRegister

EXTERN FN LirSelect (
    IN inst : ^IrInstruction,
) : ^LirRegister

EXTERN FN LirSelectOrGetRegister (
    IN var : ^IrVariable,
) : ^LirRegister

EXTERN FN LirSelectForFunction (
    IN funcsym : ^LexSymbol,
)

EXTERN FN LirAllocateRegistersForFunction (
    IN funcsym : ^LexSymbol,
)

EXTERN FN LirInsertInstructionBefore (
    IN beforeinst : ^LirInstruction,
    IN inst : ^LirInstruction,
)

EXTERN FN LirInsertInstructionAfter (
    IN afterinst : ^LirInstruction,
    IN inst : ^LirInstruction,
)

EXTERN FN LirGetSpillOffset (
    IN irfunc : ^IrFunction,
    IN spilledreg : ^LirRegister,
) : UWORD

EXTERN FN LirMoveHint (
    IN reg1 : ^LirRegister,
    IN reg2 : ^LirRegister,
)

EXTERN FN LirPeepholeForFunction (
    IN irfunc : ^IrFunction,
)

ENUM LirAbiUsage : UBYTE
    LIR_REG_UNUSABLE, // MUST be first in the enum
    LIR_REG_CALLEE_SAVED,
    LIR_REG_CALLER_SAVED,
END

STRUCT LirTargetInfoRecord
    SelectionTable : LirSelectF[IR_MAX],
    RegisterAbiUsage : LirAbiUsage[IR_MACHINE_REG_MAX],
    RegisterAllocationStatus : LirAbiUsage[IR_MACHINE_REG_MAX],
    MaximumRegister : UBYTE,
END

FNPTR AsmEmitF (
    IN funcsym : ^LexSymbol,
)

STRUCT AsmEmitterRecord
    EmitFunc : AsmEmitF,
END

EXTERN LirCurrentFunction : ^IrFunction
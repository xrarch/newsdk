#INCLUDE "<inc>/Parser.hjk"

ENUM IrInstructionType : UBYTE
    IR_MIN, // MUST be at the start

    IR_LOAD,
    IR_ADDR,
    IR_STACK_ADDR,
    IR_STRING_ADDR,
    IR_CONSTANT,
    IR_MOVE,
    IR_INSERTASM,

    IR_BRANCH_LOW_NUMBER,

    IR_RETURN,

    IR_BINARY_BRANCH_LOW_NUMBER,

    IR_BRANCH_NONZERO,
    IR_BRANCH_ZERO,
    IR_BRANCH_EQUALS,
    IR_BRANCH_NOT_EQUALS,
    IR_BRANCH_LESS_THAN,
    IR_BRANCH_GREATER_THAN,
    IR_BRANCH_LTEQ,
    IR_BRANCH_GTEQ,

    IR_BRANCH_SIGNED_LOW_NUMBER,

    IR_BRANCH_LESS_THAN_SIGNED,
    IR_BRANCH_GREATER_THAN_SIGNED,
    IR_BRANCH_LTEQ_SIGNED,
    IR_BRANCH_GTEQ_SIGNED,

    IR_BRANCH_SIGNED_HIGH_NUMBER,

    IR_BINARY_BRANCH_HIGH_NUMBER,

    IR_LABEL,
    IR_JUMP,

    IR_BRANCH_HIGH_NUMBER,

    IR_LOAD_BARRIER_LOW_NUMBER,

    IR_CALL,
    IR_BARRIER,

    IR_LOAD_BARRIER_HIGH_NUMBER,

    IR_STORE,

    IR_COMPARE_EQUALS,
    IR_COMPARE_NOT_EQUALS,
    IR_COMPARE_LESS_THAN,
    IR_COMPARE_GREATER_THAN,
    IR_COMPARE_LTEQ,
    IR_COMPARE_GTEQ,

    IR_COMPARE_SIGNED_LOW_NUMBER,

    IR_COMPARE_LESS_THAN_SIGNED,
    IR_COMPARE_GREATER_THAN_SIGNED,
    IR_COMPARE_LTEQ_SIGNED,
    IR_COMPARE_GTEQ_SIGNED,

    IR_COMPARE_SIGNED_HIGH_NUMBER,

    IR_NOT,
    IR_BIT_AND,
    IR_BIT_OR,
    IR_ADD,
    IR_SUBTRACT,
    IR_DIVIDE,
    IR_DIVIDE_SIGNED,
    IR_MODULO,
    IR_BIT_XOR,
    IR_LEFT_SHIFT,
    IR_RIGHT_SHIFT,
    IR_RIGHT_SHIFT_SIGNED,
    IR_ROTATE_RIGHT,
    IR_BIT_NOT,
    IR_MULTIPLY,

    IR_MAX, // MUST be at the end (other than DEAD)

    IR_DEAD,
END

ENUM IrVariableAnnotation : UBYTE
    IR_VAR_UNINITIALIZED,
    IR_VAR_ADDRESS_CALC,
    IR_VAR_LOCAL,
END

STRUCT IrVariableValueNumberInfo
    ListEntry : TlListEntry,
    HashEntry : TlListEntry,

    AcquiredByLoadOf : ^LexSymbol,

    ConstantValue : UWORD,

    KeySrc1 : ULONG,
    KeySrc2 : ULONG,

    ValueNumber : ULONG,

    AcquiredByLoad : UBYTE,

    KeyOp : IrInstructionType,
END

STRUCT IrVariableSimplifyInfo
    Contents : ^IrVariable,

    KnownListEntry : TlListEntry,
    
    ConstantListEntry : TlListEntry,
    ConstantHashEntry : TlListEntry,

    ConstantValue : UWORD,
END

STRUCT IrVariableEliminationInfo
    DeadListEntry : TlListEntry,

    DefinedByListHead : ^IrInstruction,

    References : ULONG,
END

UNION IrVariableOptInfo
    Vn : IrVariableValueNumberInfo,
    Sim : IrVariableSimplifyInfo,
    Dve : IrVariableEliminationInfo,
END

STRUCT IrVariable
    Symbol : ^LexSymbol,
    DefinedBy : ^IrInstruction,
    LirRegister : ^LirRegister,

    Opt : IrVariableOptInfo,

    Number : ULONG,

    Annotation : IrVariableAnnotation,
    Known : UBYTE,
    KnownConstant : UBYTE,
    ConsideredForDve : UBYTE,
END

STRUCT IrLabelBody
    Symbol : ^LexSymbol,
    LirLabel : ^LirInstruction,
    Number : ULONG,
    GenCount : ULONG,
END

STRUCT IrJumpBody
    Label : ^IrInstruction,
END

STRUCT IrLoadStoreBody
    Type : JklPrimitiveType,
END

STRUCT IrAddrBody
    Symbol : ^LexSymbol,
    Offset : UWORD,
END

STRUCT IrStringBody
    String : ^LexInternedString,
END

STRUCT IrConstantBody
    Constant : UWORD,
END

STRUCT IrBranchBody
    TrueLabel : ^IrInstruction,
    FalseLabel : ^IrInstruction,
END

STRUCT IrCallBody
    ArgListHead : ^IrArgument,
    OutListHead : ^IrArgument,
    CallNode : ^PrsAstNode,
END

UNION IrInstructionBody
    Label : IrLabelBody,
    Jump : IrJumpBody,
    LoadStore : IrLoadStoreBody,
    Addr : IrAddrBody,
    String : IrStringBody,
    Constant : IrConstantBody,
    Branch : IrBranchBody,
    Call : IrCallBody,
END

STRUCT IrArgument
    Next : ^IrArgument,
    Variable : ^IrVariable,
END

STRUCT IrInstruction
    Body : IrInstructionBody,

    Block : ^IrFunction,
    Next : ^IrInstruction,
    Prev : ^IrInstruction,

    Defines : ^IrVariable,
    Source1 : ^IrVariable,
    Source2 : ^IrVariable,

    NextDefines : ^IrInstruction,
    LirRegister : ^LirRegister,

    Type : IrInstructionType,
END

#DEFINE IR_MACHINE_REG_MAX 64

STRUCT IrFunction
    Head : ^IrInstruction,
    Tail : ^IrInstruction,
    EpilogueLabel : ^IrInstruction,

    LirHead : ^LirInstruction,
    LirTail : ^LirInstruction,

    StackFrameSize : UWORD,

    CallCount : ULONG,

    MaximumInCount : ULONG,
    MaximumOutCount : ULONG,

    RegisterAllocationStatus : UBYTE[IR_MACHINE_REG_MAX],

    // Technically target-private but common enough to warrant a spot here:

    ScratchAreaSize : UWORD,
    CallFree : UBYTE,
END

EXTERN FN IrAllocateStack (
    IN func : ^IrFunction,
    IN bytes : UWORD,
) : UWORD

EXTERN FN IrGetStackOffset (
    IN func : ^IrFunction,
    IN symbol : ^LexSymbol,
) : UWORD

EXTERN IrCommutativity : UBYTE[IR_MAX]

#MACRO IrIsUselessBranch ( inst ) [
    (((inst)^.Body.Branch.TrueLabel == (inst)^.Next) AND
    ((inst)^.Body.Branch.FalseLabel == (inst)^.Next^.Next)) OR
    (((inst)^.Body.Branch.FalseLabel == (inst)^.Next) AND
    ((inst)^.Body.Branch.TrueLabel == (inst)^.Next^.Next))
]
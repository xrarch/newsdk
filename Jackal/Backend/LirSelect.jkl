//
// Implements generic support routines for target-specific code.
//

#INCLUDE "<inc>/Target.hjk"

PUBLIC LirCurrentFunction : ^IrFunction

FN LirCreateInstruction (
    IN type : LirInstructionType,
    IN machtype : UBYTE,
) : ^LirInstruction

    lirinst : ^LirInstruction

    status := TlBumpAlloc (
        SIZEOF LirInstruction, // bytes
        OUT lirinst, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to create LIR instruction", 0, 0, 0 )
    END

    lirinst^.Type = type
    lirinst^.Defines = NULLPTR
    lirinst^.Source1 = NULLPTR
    lirinst^.Source2 = NULLPTR
    lirinst^.Source3 = NULLPTR
    lirinst^.MachineInstruction = machtype

    RETURN lirinst
END

FN LirCreateRegister () : ^LirRegister

    reg : ^LirRegister

    status := TlBumpAlloc (
        SIZEOF LirRegister, // bytes
        OUT reg, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to create LIR register", 0, 0, 0 )
    END

    reg^.HintToVirtual = NULLPTR

    reg^.Type = LIR_VIRTUAL_REG
    reg^.Symbol = NULLPTR
    reg^.DefinedYet = FALSE
    reg^.LiveAcrossCall = FALSE
    reg^.Active = FALSE
    reg^.LivenessStart = 0
    reg^.Hint = 0
    reg^.SpilledOffset = 0xFFFFFFFF

    TlFillMemoryWithByte (
        &reg^.MachineRegisterBitmap[0], // ptr
        SIZEOFVALUE reg^.MachineRegisterBitmap, // sz
        0, // byte
    )

    RETURN reg
END

FN LirInsertInstructionTail (
    IN lirinst : ^LirInstruction,
)

    // Insert the instruction at the end of the current chain.

    lirinst^.Block = LirCurrentFunction
    lirinst^.Next = NULLPTR
    lirinst^.Prev = LirCurrentFunction^.LirTail

    IF NOT LirCurrentFunction^.LirTail THEN
        LirCurrentFunction^.LirHead = lirinst
    ELSE
        LirCurrentFunction^.LirTail^.Next = lirinst
    END

    LirCurrentFunction^.LirTail = lirinst
END

FN LirInsertInstructionBefore (
    IN beforeinst : ^LirInstruction,
    IN inst : ^LirInstruction,
)

    inst^.Block = LirCurrentFunction

    IF NOT beforeinst THEN
        inst^.Prev = NULLPTR
        inst^.Next = NULLPTR

        inst^.Block^.LirTail = inst
        inst^.Block^.LirHead = inst 

        LEAVE
    END

    // Insert inst before beforeinst.

    prev := beforeinst^.Prev

    IF prev THEN
        prev^.Next = inst

    ELSE
        // beforeinst must have been the head.

        beforeinst^.Block^.LirHead = inst
    END

    beforeinst^.Prev = inst
    inst^.Next = beforeinst
    inst^.Prev = prev
END

FN LirInsertInstructionAfter (
    IN afterinst : ^LirInstruction,
    IN inst : ^LirInstruction,
)

    // Insert inst after afterinst.

    inst^.Block = LirCurrentFunction

    IF NOT afterinst THEN
        inst^.Prev = NULLPTR
        inst^.Next = NULLPTR

        inst^.Block^.LirTail = inst
        inst^.Block^.LirHead = inst 

        LEAVE
    END

    next := afterinst^.Next

    IF next THEN
        next^.Prev = inst

    ELSE
        // afterinst must have been the tail.

        afterinst^.Block^.LirTail = inst
    END

    afterinst^.Next = inst
    inst^.Prev = afterinst
    inst^.Next = next
END

FN LirRemoveInstruction (
    IN lirinst : ^LirInstruction,
)

    // Remove the instruction from the chain.

    block := lirinst^.Block

    p := lirinst^.Prev

    IF p THEN
        p^.Next = lirinst^.Next
    ELSE // no prev means we were the head
        block^.LirHead = lirinst^.Next
    END

    p = lirinst^.Next

    IF p THEN
        p^.Prev = lirinst^.Prev
    ELSE // no next means we were the tail
        block^.LirTail = lirinst^.Prev
    END
END

FN LirMoveHint (
    IN reg1 : ^LirRegister,
    IN reg2 : ^LirRegister,
)

    // Hint two virtual registers to eachother.
    // Should be done when reg-to-reg MOVs are generated.

    IF NOT reg1^.HintToVirtual THEN
        reg1^.HintToVirtual = reg2
    END

    IF NOT reg2^.HintToVirtual THEN
        reg2^.HintToVirtual = reg1
    END
END

FN LirGetLabel (
    IN oldlabel : ^IrInstruction,
) : ^LirInstruction

    // Get the LIR version of an IR label.

    lirinst := oldlabel^.Body.Label.LirLabel

    IF lirinst THEN
        RETURN lirinst
    END

    lirinst = LirCreateInstruction (
        LIR_LABEL, // type
        0, // machtype
    )

    oldlabel^.Body.Label.LirLabel = lirinst

    lirinst^.Body.Label.References = 0
    lirinst^.Body.Label.Number = 0xFFFFFFFF
    lirinst^.Body.Label.GenCount = 0

    RETURN lirinst
END

FN LirGetRegister (
    IN oldvariable : ^IrVariable,
) : ^LirRegister

    // Get the LIR version of an IR variable.

    lirreg := oldvariable^.LirRegister

    IF lirreg THEN
        RETURN lirreg
    END

    lirreg = LirCreateRegister ()

    oldvariable^.LirRegister = lirreg

    lirreg^.Symbol = oldvariable^.Symbol

    RETURN lirreg
END

FN LirGetSpillOffset (
    IN irfunc : ^IrFunction,
    IN spilledreg : ^LirRegister,
) : UWORD

    spilloff := spilledreg^.SpilledOffset

    IF spilloff != 0xFFFFFFFF THEN
        RETURN spilloff
    END

    spilloff = irfunc^.StackFrameSize + irfunc^.ScratchAreaSize

    spilledreg^.SpilledOffset = spilloff

    irfunc^.StackFrameSize += JklTargetInfo^.PointerSize

    RETURN spilloff
END

FN LirSelect (
    IN inst : ^IrInstruction,
) : ^LirRegister

    reg := inst^.LirRegister

    IF reg THEN
        RETURN reg
    END

    reg = JklTargetInfo^.LirInfo^.SelectionTable[inst^.Type] (
        inst, // inst
    )

    inst^.LirRegister = reg

    RETURN reg
END

FN LirSelectOrGetRegister (
    IN var : ^IrVariable,
) : ^LirRegister

    // Get the contents of the variable in the form of a LIR register.

    IF var^.DefinedBy THEN
        RETURN LirSelect ( var^.DefinedBy )
    END

    RETURN LirGetRegister ( var )
END

FN LirSelectForFunction (
    IN funcsym : ^LexSymbol,
)

    // Call the target's selection function for each instruction in this
    // function.

    irfunc := CAST funcsym^.InitialValue TO ^IrFunction

    irfunc^.LirHead = NULLPTR
    irfunc^.LirTail = NULLPTR

    inst := irfunc^.Head

    LirCurrentFunction = irfunc

    WHILE inst DO
        // If this IR instruction has a side effect we care about, then call the
        // target select function to select over the basic block DAG. These are:
        //
        //  o Function calls
        //  o Memory stores
        //  o Labels
        //  o Branches
        //  o Moves to named locals

        IF inst^.Type == IR_LABEL THEN
            // Just drop in a label, don't bother the target.

            lirinst := inst^.Body.Label.LirLabel

            IF NOT lirinst THEN
                lirinst = LirCreateInstruction (
                    LIR_LABEL, // type
                    0, // machtype
                )

                inst^.Body.Label.LirLabel = lirinst

                lirinst^.Body.Label.References = 0
                lirinst^.Body.Label.Number = 0xFFFFFFFF
            END

            LirInsertInstructionTail ( lirinst )

        ELSEIF inst^.Type == IR_INSERTASM THEN
            lirinst := LirCreateInstruction (
                LIR_INSERTASM, // type
                0, // machtype
            )

            lirinst^.Body.InsertAsm.String = inst^.Body.String.String

            LirInsertInstructionTail ( lirinst )

        ELSEIF inst^.Type == IR_CALL OR
            inst^.Type == IR_STORE OR
            (inst^.Type == IR_MOVE AND inst^.Defines^.Symbol) OR
            (inst^.Type == IR_CONSTANT AND NOT inst^.Defines^.DefinedBy) OR
            (inst^.Type > IR_BRANCH_LOW_NUMBER AND
            inst^.Type < IR_BRANCH_HIGH_NUMBER) THEN

            LirSelect ( inst )
        END

        inst = inst^.Next
    END
END
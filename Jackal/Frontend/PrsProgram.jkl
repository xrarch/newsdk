//
// Parses a Jackal program and constructs an abstract syntax tree.
//

#INCLUDE "<inc>/Parser.hjk"
#INCLUDE "Prs.hjk"

PUBLIC PrsGlobalListHead : ^LexSymbol = NULLPTR
PrsGlobalListTail : ^LexSymbol = NULLPTR

PUBLIC PrsFunctionListHead : ^LexSymbol = NULLPTR
PrsFunctionListTail : ^LexSymbol = NULLPTR

PrsCurrentBlock : ^PrsBlock = NULLPTR
PrsCurrentFunction : ^LexSemanticType = NULLPTR

PUBLIC PrsCompoundTypeListHead : ^LexSymbol = NULLPTR
PrsCompoundTypeListTail : ^LexSymbol = NULLPTR

PrsBlockStack : TlDynamicBuffer

PrsStringType : ^LexSemanticType = NULLPTR
PrsNullPtrType : ^LexSemanticType = NULLPTR
PrsConstantType : ^LexSemanticType = NULLPTR
PrsVarArgType : ^LexSemanticType = NULLPTR

ENUM PrsBlockType : UBYTE
    BLOCK_NULL,

    // Controls the behavior of the terminator keywords.

    BLOCK_PLAIN_BODY, // END is legal to terminate the block.
    BLOCK_IF_BODY, // ELSEIF, ELSE, and END are legal to terminate the block.

    // Nothing is legal to terminate the block. The lexer pushes this when it
    // expands a macro and pops it when the macro is empty.

    BLOCK_MACRO_BODY,
END

PrsWhileDepth : ULONG = 0

FNPTR PrsOperatorF (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

FNPTR PrsOperatorEvalF (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

STRUCT PrsOperatorRecord
    ParseFunc : PrsOperatorF,
    EvalFunc : PrsOperatorEvalF,
    Precedence : ULONG,
    NoRightSide : UBYTE,
END

// FORWARD
EXTERN PrsLeftOperators : PrsOperatorRecord[TOKEN_SUBTYPE_MAX]
EXTERN PrsOperators : PrsOperatorRecord[TOKEN_SUBTYPE_MAX]

FNPTR PrsDeclaratorF () : ^LexSymbol

// FORWARD
EXTERN PrsDeclarators : PrsDeclaratorF[TOKEN_SUBTYPE_MAX]

FNPTR PrsStatementF (
    IN token : ^LexToken,
)

// FORWARD
EXTERN FN PrsType (
    IN type : ^LexSemanticType,
    IN depth : UWORD,
)

// FORWARD
EXTERN PrsStatements : PrsStatementF[TOKEN_SUBTYPE_MAX]

FN PrsCreateType () : ^LexSemanticType

    // Create a type.

    type : ^LexSemanticType

    status := TlBumpAlloc (
        SIZEOF LexSemanticType, // bytes
        OUT type, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to create type", 0, 0, 0 )
    END

    type^.CachedIsDeclarable = FALSE
    type^.CachedIsValue = FALSE
    type^.Size = TYPE_SIZE_UNINIT
    type^.MinimumAlignment = 1

    RETURN type
END

FN PrsEnterMacro ()

    // The lexer calls this when it enters a macro.
    // Pushing this to the block stack ensures that the scope can't leave the
    // macro scope.

    TlInsertDynamicBuffer (
        &PrsBlockStack, // array
        BLOCK_MACRO_BODY, // byte
    )
END

FN PrsLeaveMacro () : UBYTE

    // The lexer calls this when it leaves a macro.

    byte := TlPopDynamicBuffer ( &PrsBlockStack )

    RETURN byte == BLOCK_MACRO_BODY
END

FN PrsCreateAstNode (
    IN type : PrsAstType,
    IN token : ^LexToken,
) : ^PrsAstNode

    // Create an AST node.

    node : ^PrsAstNode

    status := TlBumpAlloc (
        SIZEOF PrsAstNode, // bytes
        OUT node, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to create AST node", 0, 0, 0 )
    END

    node^.Type = type

    node^.CachedSemanticType = NULLPTR

    LexCopyToken (
        &node^.Token, // dest
        token, // src
    )

    RETURN node
END

FN PrsInsertNodeIntoBlock (
    IN block : ^PrsBlock,
    IN node : ^PrsAstNode,
)

    // Insert the node into the given block.

    node^.Next = NULLPTR

    IF NOT block^.StatementListTail THEN
        block^.StatementListHead = node

    ELSE
        block^.StatementListTail^.Next = node
    END

    block^.StatementListTail = node
END

FN PrsIsLvalue (
    IN node : ^PrsAstNode,
) : UBYTE

    // Return whether the node is a valid l-value or not.

    IF node^.Type == AST_IDENTIFIER THEN
        symbol := CAST node^.Token.Payload TO ^LexSymbol

        IF symbol^.SemanticType^.Subtype == TYPE_ARRAY THEN
            // Arrays aren't directly valid as l-values.

            RETURN FALSE
        END

        RETURN TRUE
    END

    IF node^.Type == AST_OPERATOR THEN
        IF node^.Token.Subtype == TOKEN_LBRACKET THEN
            // Array references are l-values.

            RETURN TRUE
        END

        IF node^.Token.Subtype == TOKEN_CARET THEN
            // Pointer derefs are l-values.

            RETURN TRUE
        END

        IF node^.Token.Subtype == TOKEN_DOT THEN
            // Compound type references are l-values.

            RETURN TRUE
        END
    END

    RETURN FALSE
END

FN PrsIsCompileTime (
    IN node : ^PrsAstNode,
) : UBYTE

    // Evaluates whether the value of a node can be known at compile time.

    // Skip casts, they shouldn't hurt this.

    WHILE node^.Type == AST_OPERATOR AND node^.Token.Subtype == TOKEN_CAST DO
        node = node^.Body.Operator.Left
    END

    IF node^.Type == AST_CONSTANT THEN
        RETURN TRUE
    END

    IF node^.Type == AST_STRING THEN
        RETURN TRUE
    END

    IF node^.Type == AST_INITIALIZER THEN
        RETURN TRUE
    END

    IF node^.Type == AST_OPERATOR AND node^.Token.Subtype == TOKEN_ADDROF THEN
        left := node^.Body.Operator.Left

        IF left^.Type == AST_IDENTIFIER THEN
            RETURN TRUE
        END
    END

    RETURN FALSE
END

FN PrsFieldSequence (
    OUT offset : UWORD,
) : ^LexSemanticType

    // Parse a sequence of the form StructName.FieldName.FieldName... and return
    // the resulting final offset and type.

    idtoken : LexToken

    IF NOT LexMatchToken (
        &idtoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &idtoken, "Expected an identifier\n" )
    END

    IF idtoken.Subtype != TOKEN_IDENTIFIER_FOUND THEN
        LexError ( &idtoken, "Expected a struct name\n" )
    END

    symbol := CAST idtoken.Payload TO ^LexSymbol

    IF symbol^.Type != SYM_TYPE THEN
        LexError ( &idtoken, "Expected a struct name\n" )
    END

    type := symbol^.SemanticType
    structtype := type

    IF NOT LexMatchToken (
        &idtoken, // token
        TOKEN_OPER, // type
        TOKEN_DOT, // subtype
    ) THEN
        LexError ( &idtoken, "Expected a dot\n" )
    END

    finaloffset : UWORD = 0

    WHILE TRUE DO
        WHILE type^.Subtype == TYPE_NAMED DO
            IF type^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
                // Forward declared type that we don't know anything about yet.

                LexError ( &idtoken,
                    "Illegal use of undeclared destination type\n" )
            END

            type = type^.Body.Named.Symbol^.SemanticType
        END

        IF type^.Subtype != TYPE_COMPOUND THEN
            LexError ( &idtoken, "Expected a struct name\n" )
        END

        LexEnterOverlayScope ( type^.Body.Compound.FieldScope )

        IF NOT LexMatchToken (
            &idtoken, // token
            TOKEN_IDENTIFIER, // type
            0, // subtype
        ) THEN
            LexError ( &idtoken, "Expected an identifier\n" )
        END

        LexExitOverlayScope ()

        IF idtoken.Subtype != TOKEN_IDENTIFIER_FOUND THEN
            LexError ( &idtoken, "Non-existent field name\n" )
        END

        symbol = CAST idtoken.Payload TO ^LexSymbol

        finaloffset += symbol^.Value

        type = symbol^.SemanticType

        IF NOT LexMatchToken (
            &idtoken, // token
            TOKEN_OPER, // type
            TOKEN_DOT, // subtype
        ) THEN
            // No more field names, we done.

            BREAK
        END
    END

    offset = finaloffset

    RETURN structtype
END

FN PrsCheckType (
    IN errtoken : ^LexToken,
    IN type1 : ^LexSemanticType,
    IN type2 : ^LexSemanticType,
    IN errstring : ^UBYTE,
    IN equivalence : UBYTE,
) : UBYTE

    // Compare the two types. type1 is taken to be a "destination" type and
    // type2 is a "source" type. If equivalence is TRUE, then exact equivalence
    // is tested rather than assignment compatibility. Returns TRUE if there is
    // an implicit cast.

    IF type1 == type2 THEN
        // They're identical, literally the same type object.

        RETURN FALSE
    END

    // First strip away any names.

    WHILE type1^.Subtype == TYPE_NAMED DO
        IF type2^.Subtype == TYPE_NAMED AND
            type1^.Body.Named.Symbol == type2^.Body.Named.Symbol THEN

            RETURN FALSE
        END

        IF type1^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // Forward declared type that we don't know anything about yet.

            LexError ( errtoken,
                "%sIllegal use of undeclared destination type\n", errstring )
        END

        type1 = type1^.Body.Named.Symbol^.SemanticType
    END

    WHILE type2^.Subtype == TYPE_NAMED DO
        IF type1^.Subtype == TYPE_NAMED AND
            type1^.Body.Named.Symbol == type2^.Body.Named.Symbol THEN

            RETURN FALSE
        END

        IF type2^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // Forward declared type that we don't know anything about yet.

            LexError ( errtoken,
                "%sIllegal use of undeclared source type\n", errstring )
        END

        type2 = type2^.Body.Named.Symbol^.SemanticType
    END

    IF type1 == type2 THEN
        // They're identical, literally the same type object.

        RETURN FALSE
    END

    IF type1^.Subtype != type2^.Subtype THEN
        // Not the same type of type.

        IF NOT equivalence THEN
            IF type1^.Subtype == TYPE_PRIMITIVE AND
                type2^.Subtype == TYPE_POINTER AND
                type1^.Body.Primitive.Type ==
                JklTargetInfo^.LargestPrimitive THEN

                // Implicit cast from pointer to UWORD is fine.

                RETURN FALSE
            END

            IF type2^.Subtype == TYPE_PRIMITIVE AND
                type1^.Subtype == TYPE_POINTER AND
                type2^.Body.Primitive.Inducible THEN

                // Implicit cast from constant to pointer is fine.

                RETURN FALSE
            END
        END

        LexError ( errtoken, "%sIncompatible types\n", errstring )
    END

    IF type1^.Subtype == TYPE_PRIMITIVE THEN
        // Both types are primitive.

        primtype1 := type1^.Body.Primitive.Type
        primtype2 := type2^.Body.Primitive.Type

        IF primtype1 == primtype2 THEN
            // They're the same, that's fine.

            RETURN FALSE
        END

        IF equivalence THEN
            // We're checking for exact equivalence.

            IF primtype1 != primtype2 THEN
                LexError ( errtoken,
                    "%sPrimitive types not equivalent\n", errstring )
            END
        END

        IF type2^.Body.Primitive.Inducible THEN
            // If the source type is inducible, then it's fine.

            RETURN TRUE
        END

        // Check that we aren't crossing from unsigned to signed.

        IF primtype1 > PRIM_TYPE_SIGNED AND
            primtype1 < PRIM_TYPE_SIGNED_MAX THEN

            IF primtype2 > PRIM_TYPE_UNSIGNED AND
                primtype2 < PRIM_TYPE_UNSIGNED_MAX THEN

                // We are, so we aren't compatible.

                LexError ( errtoken,
                    "%sImplicit cast from unsigned to signed type\n",
                    errstring )
            END

        ELSEIF primtype2 > PRIM_TYPE_SIGNED AND
            primtype2 < PRIM_TYPE_SIGNED_MAX THEN

            // We're crossing from signed to unsigned, which isn't compatible.

            LexError ( errtoken,
                "%sImplicit cast from signed to unsigned type\n", errstring )
        END

        RETURN TRUE
    END

    IF type1^.Subtype == TYPE_POINTER THEN
        // Both types are pointers. If one is a pointer to void, this is legal.

        type1base := type1^.Body.Pointer.Base

        IF NOT equivalence AND
            type1base^.Subtype == TYPE_PRIMITIVE AND
            type1base^.Body.Primitive.Type == PRIM_TYPE_VOID THEN

            RETURN FALSE
        END

        type2base := type2^.Body.Pointer.Base

        IF NOT equivalence AND
            type2base^.Subtype == TYPE_PRIMITIVE AND
            type2base^.Body.Primitive.Type == PRIM_TYPE_VOID THEN
            
            RETURN FALSE
        END

        IF type1base^.Subtype == TYPE_FUNCTION AND
            type2base^.Subtype == TYPE_FUNCTION THEN

            // Function pointers are only compatible if it's the same FNPTR.

            IF type1base^.Body.Function.IsFnPtr THEN
                IF type2base^.Body.Function.FnPtrType != type1base THEN
                    LexError ( errtoken,
                        "%sNot the same function pointer type\n", errstring )
                END

            ELSEIF type2base^.Body.Function.IsFnPtr THEN
                IF type1base^.Body.Function.FnPtrType != type2base THEN
                    LexError ( errtoken,
                        "%sNot the same function pointer type\n", errstring )
                END

            ELSEIF type1base^.Body.Function.FnPtrType !=
                type2base^.Body.Function.FnPtrType THEN

                LexError ( errtoken,
                    "%sNot the same function pointer type\n", errstring )
            END

            RETURN FALSE
        END

        // Recursively check the types they point to.

        PrsCheckType (
            errtoken, // errtoken
            type1base, // type1
            type2base, // type2
            errstring, // errstring
            equivalence, // equivalence
        )

        RETURN FALSE
    END

    IF type1^.Subtype == TYPE_COMPOUND THEN
        // Compound types are only compatible if they're the same type.

        IF type1 != type2 THEN
            LexError ( errtoken, "%sIncompatible compound types\n", errstring )
        END

        RETURN FALSE
    END

    IF type1^.Subtype == TYPE_ARRAY THEN
        // Both types are arrays.

        IF type1^.Body.Array.HasBound AND type2^.Body.Array.HasBound THEN
            IF type1^.Body.Array.Bound != type2^.Body.Array.Bound THEN
                LexError ( errtoken, "%sArray type bound differs\n", errstring )
            END
        END

        // Recursively check the base types.

        PrsCheckType (
            errtoken, // errtoken
            type1^.Body.Array.Base, // type1
            type2^.Body.Array.Base, // type2
            errstring, // errstring
            equivalence, // equivalence
        )

        RETURN FALSE
    END

    IF type1^.Subtype == TYPE_FUNCTION THEN
        // Function types are only compatible if they're structurally the same
        // type.

        // First check the easy stuff.

        // Check FNPTR type.

        IF type1^.Body.Function.FnPtrType != type2^.Body.Function.FnPtrType THEN
            LexError ( errtoken, "%sNot the same FNPTR type\n", errstring )
        END

        // Check return value types.

        IF type1^.Body.Function.ReturnType THEN
            IF NOT type2^.Body.Function.ReturnType THEN
                LexError ( errtoken,
                    "%sIncompatible return value types\n", errstring )
            END

            PrsCheckType (
                errtoken, // errtoken
                type1^.Body.Function.ReturnType, // type1
                type2^.Body.Function.ReturnType, // type2
                errstring, // errstring
                TRUE, // equivalence
            )

        ELSEIF type2^.Body.Function.ReturnType THEN
            LexError ( errtoken,
                "%sIncompatible return value types\n", errstring )
        END

        // Check vararg-ness.

        IF type1^.Body.Function.IsVarArg != type2^.Body.Function.IsVarArg THEN
            LexError ( errtoken, "%sNot the same varargness\n", errstring )
        END

        // Check argument count.

        IF type1^.Body.Function.ArgCount != type2^.Body.Function.ArgCount THEN
            LexError ( errtoken, "%sWrong argument count\n", errstring )
        END

        // Check each argument for type and name equivalence.

        arg1 := type1^.Body.Function.ArgListHead
        arg2 := type2^.Body.Function.ArgListHead

        WHILE arg1 DO
            IF TlCompareString ( arg1^.Symbol^.Name, arg2^.Symbol^.Name ) THEN
                LexError ( &arg2^.Token,
                    "%sArgument name mismatch\n", errstring )
            END

            PrsCheckType (
                &arg2^.Token, // errtoken
                arg1^.Symbol^.SemanticType, // type1
                arg2^.Symbol^.SemanticType, // type2
                errstring, // errstring
                TRUE, // equivalence
            )

            arg1 = arg1^.Next
            arg2 = arg2^.Next
        END

        RETURN FALSE
    END

    TlInternalError ( "PrsCheckType Unreachable", 0, 0, 0 )

    RETURN FALSE
END

FN PrsAtom () : ^PrsAstNode

    // Parse an atom. This is an "atomic" part of an expression, such as a
    // single constant number or identifier.

    atomnode : ^PrsAstNode

    token : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_NUMBER THEN
        // This is a constant number.

        atomnode = PrsCreateAstNode (
            AST_CONSTANT, // type
            &token, // token
        )

        atomnode^.Body.Constant.Value = CAST token.Payload TO UWORD

    ELSEIF token.Type == TOKEN_IDENTIFIER THEN
        // This is an identifier. The symbol pointer and stuff stay in the token
        // payload.

        IF token.Subtype == TOKEN_IDENTIFIER_NEW THEN
            LexError ( &token, "Use of undeclared symbol.\n" )
        END

        symbol := CAST token.Payload TO ^LexSymbol

        IF symbol^.Type == SYM_CONSTANT THEN
            // This is a constant.

            atomnode = PrsCreateAstNode (
                AST_CONSTANT, // type
                &token, // token
            )

            atomnode^.Body.Constant.Value = symbol^.Value

        ELSEIF symbol^.Type == SYM_VAR THEN
            atomnode = PrsCreateAstNode (
                AST_IDENTIFIER, // type
                &token, // token
            )

        ELSE
            LexError ( &token, "Expected a variable.\n" )
        END

    ELSEIF token.Type == TOKEN_STRING THEN
        // This is a literal string. The value of the string stays in the
        // token payload.

        atomnode = PrsCreateAstNode (
            AST_STRING,
            &token, // token
        )

    ELSEIF token.Type == TOKEN_OPER AND token.Subtype == TOKEN_LPAREN THEN
        // This is a parenthesized expression.

        atomnode = PrsExpression ( 0 )

        // Collect the right parenthesis.

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            LexError ( &token, "Expected a right parenthesis.\n" )
        END

    ELSEIF token.Type == TOKEN_OPER THEN
        // This must be a left-operator. Look it up in the table.
        // The operator type stays as the subtype of the token.

        operator := &PrsLeftOperators[token.Subtype]

        IF NOT operator^.Precedence THEN
            LexError ( &token, "Expected a left operator.\n" )
        END

        atomnode = PrsCreateAstNode (
            AST_OPERATOR, // type
            &token, // token
        )

        IF NOT operator^.NoRightSide THEN
            // Actually the left side but who's checking.

            atomnode^.Body.Operator.Left = PrsExpression ( operator^.Precedence )
        END

        IF operator^.ParseFunc THEN
            operator^.ParseFunc (
                operator, // operator
                atomnode, // node
            )
        END

    ELSEIF token.Type == TOKEN_VALUE THEN
        // This is a primitive value, such as NULLPTR, TRUE, or FALSE.
        // The value type stays as the subtype of the token.

        IF token.Subtype == TOKEN_TRUE THEN
            atomnode = PrsCreateAstNode (
                AST_CONSTANT,
                &token, // token
            )

            atomnode^.Body.Constant.Value = 1

        ELSEIF token.Subtype == TOKEN_FALSE OR
            token.Subtype == TOKEN_NULLPTR THEN

            atomnode = PrsCreateAstNode (
                AST_CONSTANT,
                &token, // token
            )

            atomnode^.Body.Constant.Value = 0
        END

    ELSEIF token.Type == TOKEN_SIZEOF THEN
        // We have to create a constant containing the size of the type.

        type := PrsCreateType ()

        PrsType (
            type, // type
            0, // depth
        )

        // Skip the names.

        WHILE type^.Subtype == TYPE_NAMED DO
            IF type^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
                // Forward declared type that we don't know anything about yet.

                LexError ( &token,
                    "Illegal use of undeclared type\n" )
            END

            type = type^.Body.Named.Symbol^.SemanticType
        END

        IF type^.Size == TYPE_SIZE_UNINIT THEN
            LexError ( &token,
                "Can't take the size of this type\n" )
        END

        atomnode = PrsCreateAstNode (
            AST_CONSTANT,
            &token, // token
        )

        atomnode^.Body.Constant.Value = type^.Size

    ELSEIF token.Type == TOKEN_OFFSETOF THEN
        // We have to create a constant containing the offset of the field in
        // the given struct. Syntax is OFFSETOF StructName.FieldName.

        offset : UWORD

        PrsFieldSequence (
            OUT offset, // offset
        )

        atomnode = PrsCreateAstNode (
            AST_CONSTANT,
            &token, // token
        )

        atomnode^.Body.Constant.Value = offset

    ELSE
        LexError ( &token, "Expected an atom.\n" )
    END

    RETURN atomnode
END

FN PrsExpression (
    IN minprecedence : UWORD,
) : ^PrsAstNode

    // Parse a expression. Pays attention to precedence.

    WHILE LexMatchToken (
        NULLPTR, // token
        TOKEN_STATEMENT, // type
        TOKEN_NOTHING, // subtype
    ) DO
        // Peel away the NOTHINGs.
    END

    atomnode := PrsAtom ()

    optoken : LexToken

    WHILE LexMatchToken (
        &optoken, // token
        TOKEN_OPER, // type
        0, // subtype
    ) DO
        operator := &PrsOperators[optoken.Subtype]

        IF NOT operator^.Precedence THEN
            // This must have been a left operator, which we didn't expect.

            LexError ( &optoken, "Unexpected left operator\n" )
        END

        IF operator^.Precedence < minprecedence THEN
            // Put the operator token back.

            LexPutbackToken ( &optoken )

            BREAK
        END

        node := PrsCreateAstNode (
            AST_OPERATOR, // type
            &optoken, // token
        )

        node^.Body.Operator.Left = atomnode

        IF NOT operator^.NoRightSide THEN
            node^.Body.Operator.Right = PrsExpression (
                operator^.Precedence + 1, // minprecedence
            )
        END

        IF operator^.ParseFunc THEN
            operator^.ParseFunc (
                operator, // operator
                node, // node
            )
        END

        atomnode = node
    END

    RETURN atomnode
END

FN PrsCheckConstant (
    IN errtoken : ^LexToken,
    IN type : ^LexSemanticType,
    IN value : UWORD,
)

    // Make sure the value fits in the type.

    IF type^.Subtype != TYPE_PRIMITIVE THEN
        LEAVE
    END

    primtype := type^.Body.Primitive.Type

    signbits := JklSignExtendedTypeMasks[primtype] & value

    IF signbits == JklSignExtendedTypeMasks[primtype] OR signbits == 0 THEN
        LEAVE
    END

    IF primtype > PRIM_TYPE_SIGNED AND primtype < PRIM_TYPE_SIGNED_MAX THEN
        LexError ( errtoken,
            "Constant doesn't fit in signed type\n" )
    END

    masked := value & JklPrimitiveTypeMasks[primtype]

    IF masked != value THEN
        LexError ( errtoken, "Constant doesn't fit in type\n" )
    END
END

FN PrsEvaluateType (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Evaluate the type that will be produced by an AST expression.

    // We can memo-ize this by stashing the result in the node and returning
    // that in the future.

    IF node^.CachedSemanticType THEN
        RETURN node^.CachedSemanticType
    END

    type : ^LexSemanticType

    IF node^.Type == AST_IDENTIFIER THEN
        // Get the type from the symbol.

        symbol := CAST node^.Token.Payload TO ^LexSymbol

        type = symbol^.SemanticType
    
    ELSEIF node^.Type == AST_STRING THEN
        // Use the default pre-prepared string type, which is pointer to UBYTE.

        type = PrsStringType

    ELSEIF node^.Type == AST_CONSTANT THEN
        IF node^.Token.Type == TOKEN_VALUE AND
            node^.Token.Subtype == TOKEN_NULLPTR THEN

            // Use the default pre-prepared null pointer type, which is just a
            // pointer to VOID.

            type = PrsNullPtrType

        ELSE
            // Use the default pre-prepared constant type, which is the largest
            // signed primitive type for the target (i.e. LONG for 32-bits, QUAD
            // for 64-bits), and is "inducible", a special property that lets it
            // implicitly cast to any other primitive type.

            type = PrsConstantType
        END

    ELSEIF node^.Type == AST_OPERATOR THEN
        type = PrsOperators[node^.Token.Subtype].EvalFunc (
            node, // node
        )

    ELSE
        TlInternalError (
            "PrsEvaluateType Inappropriate AST type", node^.Type, 0, 0 )
    END

    // Skip any names.

    WHILE type^.Subtype == TYPE_NAMED DO
        IF type^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // Forward declared type that we don't know anything about yet.

            LexError ( &node^.Token,
                "Illegal use of undeclared type\n" )
        END

        type = type^.Body.Named.Symbol^.SemanticType
    END

    node^.CachedSemanticType = type

    RETURN type
END

FN PrsTypeIsDeclarable (
    IN errtoken : ^LexToken,
    IN type : ^LexSemanticType,
) : UBYTE

    // Returns TRUE if the type can be directly declarable, FALSE otherwise.

    IF type^.CachedIsDeclarable THEN
        RETURN TRUE
    END

    originaltype := type

    // Skip past all the names first.

    WHILE type^.Subtype == TYPE_NAMED DO
        IF type^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // Forward declared type that we don't know anything about yet.

            LexError ( errtoken,
                "Illegal use of undeclared type\n" )
        END

        type = type^.Body.Named.Symbol^.SemanticType
    END

    IF type^.Subtype == TYPE_FUNCTION THEN
        // Functions are not directly declarable.

        RETURN FALSE
    END

    IF type^.Subtype == TYPE_PRIMITIVE AND
        type^.Body.Primitive.Type == PRIM_TYPE_VOID THEN

        // VOID types are not directly declarable.

        RETURN FALSE
    END

    originaltype^.CachedIsDeclarable = TRUE

    RETURN TRUE
END

FN PrsTypeIsValue (
    IN errtoken : ^LexToken,
    IN type : ^LexSemanticType,
) : UBYTE

    // Returns TRUE if the type represents some kind of datum, FALSE otherwise.

    IF type^.CachedIsValue THEN
        RETURN TRUE
    END

    originaltype := type

    // Skip past all the names first.

    WHILE type^.Subtype == TYPE_NAMED DO
        IF type^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // Forward declared type that we don't know anything about yet.

            LexError ( errtoken,
                "Illegal use of undeclared type\n" )
        END

        type = type^.Body.Named.Symbol^.SemanticType
    END

    IF type^.Subtype == TYPE_FUNCTION THEN
        // Functions are not directly usable as values.

        RETURN FALSE
    END

    IF type^.Subtype == TYPE_COMPOUND THEN
        // Compound types (STRUCT and UNION) are not directly usable as values.

        RETURN FALSE
    END

    IF type^.Subtype == TYPE_ARRAY THEN
        // Arrays are not directly usable as values.

        RETURN FALSE
    END

    IF type^.Subtype == TYPE_PRIMITIVE AND
        type^.Body.Primitive.Type == PRIM_TYPE_VOID THEN

        // VOID types are not directly usable as values.

        RETURN FALSE
    END

    originaltype^.CachedIsValue = TRUE

    RETURN TRUE
END

FN PrsCheckNodeIsValue (
    IN node : ^PrsAstNode,
)

    // Check if an AST node evaluates to a value type, and error if not.

    type := PrsEvaluateType ( node )

    IF NOT PrsTypeIsValue (
        &node^.Token, // errtoken
        type, // type
    ) THEN
        LexError ( &node^.Token,
            "This type is not directly usable as a value\n" )
    END
END

FN PrsHasSideEffect (
    IN node : ^PrsAstNode,
) : UBYTE

    // Return whether the AST node has a side effect.
    // We only expect expression nodes here.

    IF node^.Type == AST_OPERATOR AND
        node^.Token.Subtype == TOKEN_LPAREN THEN

        // Function calls may have side effects.

        RETURN TRUE
    END

    RETURN FALSE
END

FN PrsType (
    IN type : ^LexSemanticType,
    IN depth : UWORD,
)

    // Parse the type into the provided type structure.

    typetoken : LexToken

    LexGetToken ( &typetoken )

    IF typetoken.Type == TOKEN_PTYPE THEN
        // It's a primitive type, that was easy!

        IF NOT JklTargetInfo^.SupportedTypes[typetoken.TypeContext] THEN
            LexError ( &typetoken,
                "This primitive type is not supported on this target\n" )
        END

        type^.Subtype = TYPE_PRIMITIVE
        type^.Body.Primitive.Type = typetoken.TypeContext
        type^.Body.Primitive.Inducible = FALSE

        type^.MinimumAlignment =
            JklTargetInfo^.PrimitiveAlignment[typetoken.TypeContext]

        type^.Size =
            JklTargetInfo^.PrimitiveSize[typetoken.TypeContext]

    ELSEIF typetoken.Type == TOKEN_OPER AND typetoken.Subtype == TOKEN_CARET THEN
        // It's a pointer type! Allocate a base type.

        basetype := PrsCreateType ()

        // Parse the base type into it.

        PrsType (
            basetype, // type
            depth + 1, // depth
        )

        type^.Subtype = TYPE_POINTER
        type^.Body.Pointer.Base = basetype
        type^.MinimumAlignment = JklTargetInfo^.PointerAlignment
        type^.Size = JklTargetInfo^.PointerSize

    ELSEIF typetoken.Type == TOKEN_IDENTIFIER THEN
        // It's a named type!

        symbol := CAST typetoken.Payload TO ^LexSymbol

        IF typetoken.Subtype == TOKEN_IDENTIFIER_FOUND THEN
            // This symbol has already appeared, so verify that it's a type.

            IF symbol^.Type != SYM_TYPE AND
                symbol^.Type != SYM_FORWARD_TYPE THEN

                // Nope, that's bad :(

                LexError ( &typetoken, "Symbol isn't a type\n" )
            END

        ELSE
            // This is a new type, so forward declare it for now.

            symbol^.Type = SYM_FORWARD_TYPE
        END

        type^.Subtype = TYPE_NAMED
        type^.Body.Named.Symbol = symbol

    ELSE
        // Type didn't match with anything we expected.

        LexError ( &typetoken,
            "Type must be primitive, pointer, or named.\n" )
    END

    IF depth THEN
        // We don't collect the array components if the type is nested at all.

        LEAVE
    END

    // Collect array components, if any exist. This has to be done in a manner
    // such that the type structure we were passed in becomes the head of a
    // chain of array types, where the tail of the chain contains the original
    // type.

    IF NOT LexMatchToken (
        NULLPTR, // token
        TOKEN_OPER, // type
        TOKEN_LBRACKET, // subtype
    ) THEN
        // No array components.

        LEAVE
    END

    dimensions := 1
    boundless := FALSE

    // There are array components, so firstly we need to allocate a base type
    // and move whatever we created for this type into it.

    basetype := PrsCreateType ()

    TlCopyMemory (
        basetype, // dest
        type, // src
        SIZEOF LexSemanticType, // sz
    )

    skippedtype := basetype

    WHILE skippedtype^.Subtype == TYPE_NAMED DO
        IF skippedtype^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // Forward declared type that we don't know anything about yet.

            LexError ( &typetoken,
                "Illegal use of undeclared type\n" )
        END

        skippedtype = skippedtype^.Body.Named.Symbol^.SemanticType
    END

    IF NOT PrsTypeIsDeclarable (
        &typetoken, // errtoken
        skippedtype, // type
    ) THEN
        LexError ( &typetoken,
            "This type is not directly declarable\n" )
    END

    IF skippedtype^.Size == TYPE_SIZE_UNINIT THEN
        LexError ( &typetoken,
            "This type is not suitable as a base for an array\n" )
    END

    elementalign := skippedtype^.MinimumAlignment
    size := skippedtype^.Size

    arraytype := type
    arraytype^.Size = TYPE_SIZE_UNINIT

    arraytail : ^LexSemanticType = NULLPTR

    WHILE TRUE DO
        arraytype^.Subtype = TYPE_ARRAY
        arraytype^.MinimumAlignment = elementalign

        IF arraytail THEN
            arraytail^.Body.Array.Base = arraytype
        END

        arraytype^.Body.Array.Parent = arraytail

        arraytail = arraytype

        IF LexMatchToken (
            NULLPTR, // token
            TOKEN_RBRACKET, // type
            0, // subtype
        ) THEN
            // The array is boundless.

            IF dimensions > 1 THEN
                LexError ( &typetoken,
                    "Boundless arrays can't be multidimensional.\n" )
            END

            boundless = TRUE

            arraytype^.Body.Array.HasBound = FALSE

        ELSE
            boundnode := PrsExpression ( 0 )

            IF boundnode^.Type != AST_CONSTANT THEN
                LexError ( &typetoken,
                    "Expected a constant array bound\n" )
            END

            IF boundnode^.Body.Constant.Value == 0 THEN
                LexError ( &typetoken,
                    "Array bound must not be zero\n" )
            END

            arraytype^.Body.Array.Bound = boundnode^.Body.Constant.Value
            arraytype^.Body.Array.HasBound = TRUE

            rbrackettoken : LexToken

            IF NOT LexMatchToken (
                &rbrackettoken, // token
                TOKEN_RBRACKET, // type
                0, // subtype
            ) THEN
                LexError ( &rbrackettoken,
                    "Array type must be terminated by right bracket.\n" )
            END
        END

        IF NOT LexMatchToken (
            NULLPTR, // token
            TOKEN_OPER, // type
            TOKEN_LBRACKET, // subtype
        ) THEN
            // No more array components.

            BREAK
        END

        IF boundless THEN
            LexError ( &typetoken,
                "Boundless arrays can't be multidimensional.\n" )
        END

        dimensions += 1

        arraytype = PrsCreateType ()
    END

    arraytail^.Body.Array.Base = basetype

    IF NOT boundless THEN
        // Walk the chain of array types from the tail up to set the sizes.

        walkptr := arraytail

        WHILE walkptr DO
            walkptr^.Body.Array.ElementSize = size

            size *= walkptr^.Body.Array.Bound

            walkptr^.Size = size

            walkptr = walkptr^.Body.Array.Parent
        END

    ELSE
        arraytail^.Body.Array.ElementSize = size
    END
END

FN PrsFoundSymbol (
    IN token : ^LexToken,
    IN symbol : ^LexSymbol,
    IN flags : ULONG,
    IN global : UBYTE,
    IN newtype : ^LexSemanticType,
)

    // A symbol is being declared. Check for override and make sure stuff is
    // legal and whatever. This is its own function because it is common between
    // function and variable declarations.

    IF token^.Subtype == TOKEN_IDENTIFIER_FOUND THEN
        // This symbol has already appeared, so we want to find out if this is
        // a valid override.

        IF symbol^.Type != SYM_VAR THEN
            // This symbol isn't the expected type.

            LexError ( token, "Symbol name already in use.\n" )
        END

        IF flags & VAR_FLAG_EXTERN THEN
            // This is an attempt at an extern declaration. Externs can't
            // override anything.

            LexError ( token, "Symbol already declared.\n" )
        END

        IF NOT (symbol^.Flags & VAR_FLAG_EXTERN) THEN
            // Can only override externs.

            LexError ( token, "Symbol already declared.\n" )
        END

        IF NOT global THEN
            // Can't override externs from local scope.

            LexError ( token,
                "Can't override extern from local scope.\n" )
        END

        PrsCheckType (
            token, // errtoken
            symbol^.SemanticType, // type1
            newtype, // type2
            "Can't override: ", // errstring
            TRUE, // equivalence
        )

        IF global THEN
            // Add a dummy extern entry after us so that a forward decl still
            // appears in the expected spot. This is kind of hacky and is mostly
            // for the benefit of the C transpiler backend.

            dummyextern : ^LexSymbol

            status := TlBumpAlloc (
                SIZEOF LexSymbol,
                OUT dummyextern, // ptr
            )

            TlCopyMemory (
                dummyextern, // dest
                symbol, // src
                SIZEOF LexSymbol, // sz
            )

            // Add the dummy after us and remove ourselves.

            dummyextern^.Prev = symbol^.Prev
            dummyextern^.Next = symbol^.Next

            IF PrsGlobalListTail == symbol THEN
                PrsGlobalListTail = dummyextern
            ELSE
                symbol^.Next^.Prev = dummyextern
            END

            p := symbol^.Prev

            IF p THEN
                p^.Next = dummyextern
            ELSE // no prev means we were the head
                PrsGlobalListHead = dummyextern
            END

            // Re-add at tail.

            tail := PrsGlobalListTail

            symbol^.Next = NULLPTR
            symbol^.Prev = tail

            IF tail THEN
                tail^.Next = symbol

            ELSE
                PrsGlobalListHead = symbol
            END

            PrsGlobalListTail = symbol
        END

    ELSE
        // Initialize the symbol.

        symbol^.Type = SYM_VAR

        IF global THEN
            // Add it to the list of globals, at the tail.

            tail := PrsGlobalListTail

            symbol^.Next = NULLPTR
            symbol^.Prev = tail

            IF tail THEN
                tail^.Next = symbol

            ELSE
                PrsGlobalListHead = symbol
            END

            PrsGlobalListTail = symbol
        END
    END

    symbol^.Flags = flags

    symbol^.SemanticType = newtype
END

FN PrsVariableDeclaration (
    IN token : ^LexToken,
    IN flags : ULONG,
    IN global : UBYTE,
) : ^LexSymbol

    // Parse a variable declaration of one of the following forms:
    //
    //  name : type = initial
    //  name : = initial
    //  name : type
    //
    // The colon has already been consumed (that's how the caller knew this is a
    // declaration and not an assignment).
    // Non-extern declarations may override extern declarations.
    // Extern declarations must not have an initial value, just a name and type.
    // The passed in token contains the relevant symbol already.
    // For local declarations, we should generate an AST assignment node.
    // For globals, we should just associate the initial value with the symbol,
    // and add the symbol to a list of globals for the whole program. The
    // initial value AST node is interpreted in the next phase of the compiler.

    symbol := CAST token^.Payload TO ^LexSymbol

    // We should see if there's a pending section override from the lexer, and
    // do it now if so.

    IF LexNextSymbolSection THEN
        // There was a single-symbol section override via SECTION directive.

        symbol^.Section = LexNextSymbolSection
        LexNextSymbolSection = NULLPTR

    ELSE
        symbol^.Section = LexCurrentSection
    END

    // Now we have to check if the next token is an equals sign. If so, the type
    // is inferred. Otherwise, we have to put the token back and parse the type.

    type : ^LexSemanticType = NULLPTR

    hasinitializer := TRUE

    IF NOT LexMatchToken (
        NULLPTR, // token
        TOKEN_ASSIGN, // type
        TOKEN_EQUALS, // subtype
    ) THEN
        // The type is explicit. Parse that now.

        type = PrsCreateType ()

        PrsType (
            type, // type
            0, // depth
        )

        IF NOT PrsTypeIsDeclarable (
            token, // errtoken
            type, // type
        ) THEN
            LexError ( token,
                "This type is not directly declarable\n" )
        END

        eqtoken : LexToken

        IF NOT LexMatchToken (
            &eqtoken, // token
            TOKEN_ASSIGN, // type
            TOKEN_EQUALS, // subtype
        ) THEN
            // This variable is uninitialized.

            hasinitializer = FALSE
        END
    END

    initialnode : ^PrsAstNode = NULLPTR

    IF hasinitializer THEN
        IF flags & VAR_FLAG_EXTERN THEN
            LexError ( token,
                "EXTERN declarations must not have an initializer.\n" )
        END

        // Parse the initializer.

        IF NOT type THEN
            // If the type was implicit, evaluate the type of the initial value.

            initialnode = PrsExpression ( 0 )

            type = PrsEvaluateType ( initialnode )

            IF NOT PrsTypeIsValue (
                &initialnode^.Token, // errtoken
                type, // type
            ) THEN
                LexError ( &initialnode^.Token,
                    "This type is not directly usable as a value\n" )
            END
            
        ELSE
            striptype := type

            // First strip away any type names.

            WHILE striptype^.Subtype == TYPE_NAMED DO
                IF striptype^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
                    // Forward declared type that we don't know anything about
                    // yet.

                    LexError ( &initialnode^.Token,
                        "Illegal use of undeclared type\n" )
                END

                striptype = striptype^.Body.Named.Symbol^.SemanticType
            END

            initialnode = PrsParseInitializer (
                token, // errtoken
                striptype, // type
                NULLPTR, // contentsarray
                NULLPTR, // backpatcharray
                0, // contentsoffset
            )

            IF initialnode^.Type != AST_INITIALIZER THEN
                // It's not a fancy array/struct initializer, so check the
                // expression against the explicit type, and emit an error if
                // it's a constant and is too large for the type.

                initialtype := PrsEvaluateType ( initialnode )

                PrsCheckType (
                    &initialnode^.Token, // errtoken
                    type, // type1
                    initialtype, // type2
                    "Initial value doesn't match explicit type: ", // errstring
                    FALSE, // equivalence
                )
            END
        END
    END

    IF type^.Subtype == TYPE_ARRAY AND
        NOT type^.Body.Array.HasBound AND
        NOT (flags & VAR_FLAG_EXTERN) THEN

        LexError ( token,
            "Can't declare a boundless array\n" )
    END

    // Do general declaration processing of the symbol.

    PrsFoundSymbol (
        token, // token
        symbol, // symbol
        flags, // flags
        global, // global
        type, // newtype
    )

    IF NOT global THEN
        IF hasinitializer THEN
            // Create an AST node for the assignment of the initial value.

            idnode := PrsCreateAstNode (
                AST_IDENTIFIER, // type
                token, // token
            )

            asgnnode := PrsCreateAstNode (
                AST_ASSIGN, // type
                token, // token
            )

            asgnnode^.Token.Subtype = TOKEN_EQUALS

            asgnnode^.Body.Assign.Left = idnode
            asgnnode^.Body.Assign.Right = initialnode

            // We can place it directly in the statement list for the current
            // block because the existence of a block is implied by the fact
            // this is a local declaration.

            PrsInsertNodeIntoBlock (
                PrsCurrentBlock, // block
                asgnnode, // node
            )
        END

    ELSE
        IF initialnode THEN
            // Statically evaluate the initial value. If it can't be statically
            // evaluated, that's an error, since this is a global. Note that we
            // might still leave it as a "complex" AST node if it's a pointer to
            // some other global or something because we don't know the value of
            // that immediately.

            IF NOT PrsIsCompileTime ( initialnode ) THEN
                LexError ( token,
                    "Globals require a compile-time initial value.\n" )
            END

            symbol^.InitialValue = initialnode

            IF symbol^.Section == &LexDefaultSection THEN
                IF initialnode^.Type == AST_CONSTANT AND
                    initialnode^.Body.Constant.Value == 0 THEN

                    symbol^.Section = &LexBssSection

                ELSE
                    symbol^.Section = &LexDataSection
                END
            END

        ELSE
            // Uninitialized globals have a value of zero, always.

            symbol^.InitialValue = NULLPTR

            IF symbol^.Section == &LexDefaultSection THEN
                symbol^.Section = &LexBssSection
            END
        END
    END

    RETURN symbol
END

FN PrsGlobalDeclaration () : UBYTE

    // Parse the next global declaration. Return FALSE on EOF.

    token : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_EOF THEN
        RETURN FALSE
    END

    IF token.Type != TOKEN_IDENTIFIER AND token.Type != TOKEN_DECL THEN
        LexError ( &token,
            "Expected identifier or declarative keyword\n" )
    END

    IF token.Type == TOKEN_IDENTIFIER THEN
        // This is a non-public, non-extern variable declaration.
        // It may be overriding an extern declaration.

        colontoken : LexToken

        IF NOT LexMatchToken (
            &colontoken, // token
            TOKEN_COLON, // type
            TOKEN_SUBTYPE_ANY, // subtype
        ) THEN
            // There MUST be a colon for global declarations, otherwise it would
            // be a global assignment which makes no sense.

            LexError ( &colontoken,
                "Expected a colon (indicating a declaration).\n" )
        END

        PrsVariableDeclaration (
            &token, // token
            0, // flags
            TRUE, // global
        )

        RETURN TRUE
    END

    // This is a declarative keyword of some variety.

    PrsDeclarators[token.Subtype] ()

    RETURN TRUE
END

FN PrsParseBlock (
    OUT terminator : LexTokenSubtype,
) : ^PrsBlock

    // Parse a block. A block is composed of a sequence of statements, followed
    // by one of the allowed terminator keywords.

    block : ^PrsBlock

    status := TlBumpAlloc (
        SIZEOF PrsBlock, // bytes
        OUT block, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate a block", 0, 0, 0 )
    END

    // Initialize the block.

    block^.StatementListHead = NULLPTR
    block^.StatementListTail = NULLPTR
    block^.StatementCount = 0
    block^.LabelCount = 0

    // Save the old block and set the new.

    oldblock := PrsCurrentBlock
    PrsCurrentBlock = block

    WHILE TRUE DO
        token : LexToken

        IF LexMatchToken (
            &token, // token
            TOKEN_TERMINATOR, // type
            0, // subtype
        ) THEN
            // We found a terminator keyword. Check if this terminator is
            // allowed right now and break out.

            terminator = token.Subtype

            IF PrsBlockStack.Count == 0 THEN
                TlInternalError ( "Block stack was empty", 0, 0, 0 )
            END

            blockstate := PrsBlockStack.Buffer[PrsBlockStack.Count - 1]

            IF blockstate == BLOCK_MACRO_BODY THEN
                LexError ( &token,
                    "Attempt to leave block from within macro\n" )
            END

            IF blockstate == BLOCK_PLAIN_BODY THEN
                IF token.Subtype != TOKEN_END THEN
                    LexError ( &token,
                        "Only END is allowed to terminate this block\n" )
                END

                BREAK
            END

            IF blockstate == BLOCK_IF_BODY THEN
                BREAK
            END

            TlInternalError ( "PrsParseBlock Unreachable", blockstate, 0, 0 )
        END

        IF LexMatchToken (
            &token, // token
            TOKEN_STATEMENT, // type
            0, // subtype
        ) THEN
            // We found a statement keyword. Look up the table and call the
            // parse function for the statement.

            PrsStatements[token.Subtype] (
                &token, // token
            )

            CONTINUE
        END

        // There are now three options:
        //
        // Declaration: IDENTIFIER : TYPE = INITIAL
        // Assignment: EXPR = EXPR
        // Expression w/ side effects: EXPR
        //
        // The only way to tell if it's a declaration is to look ahead by two
        // tokens. After we've ruled that out we can safely eat an expression.
        // Then we check if there's an equals sign; if so, it's an assignment,
        // otherwise, it's a free-floating expression (such as a function call).

        decl := FALSE

        LexGetToken ( &token )

        IF token.Type == TOKEN_IDENTIFIER THEN
            // Maybe a declaration? Check for the colon.

            colontoken : LexToken

            IF LexMatchToken (
                &colontoken, // token
                TOKEN_COLON, // type
                0, // subtype
            ) THEN
                // Yep!

                decl = TRUE
            END
        END

        IF decl THEN
            // It was a declaration, parse the rest.

            PrsVariableDeclaration (
                &token, // token
                0, // flags
                FALSE, // global
            )
        ELSE
            // Not a declaration. Put the token back and try the expression
            // cases.

            LexPutbackToken ( &token )

            leftexpr := PrsExpression ( 0 )

            // Check for an assign operator.

            assigntoken : LexToken

            IF LexMatchToken (
                &assigntoken, // token
                TOKEN_ASSIGN, // type
                0, // subtype
            ) THEN
                // Found an assign operator.

                asgnnode := PrsCreateAstNode (
                    AST_ASSIGN, // type
                    &assigntoken, // token
                )

                IF NOT PrsIsLvalue ( leftexpr ) THEN
                    LexError ( &leftexpr^.Token, "Not a valid L-value\n" )
                END

                lefttype := PrsEvaluateType ( leftexpr )

                IF NOT PrsTypeIsValue (
                    &leftexpr^.Token, // errtoken
                    lefttype, // type
                ) THEN
                    LexError ( &leftexpr^.Token,
                        "This type is not directly assignable\n" )
                END

                asgnnode^.Body.Assign.Left = leftexpr

                rightexpr := PrsExpression ( 0 )

                righttype := PrsEvaluateType ( rightexpr )

                IF NOT PrsTypeIsValue (
                    &rightexpr^.Token, // errtoken
                    righttype, // type
                ) THEN
                    LexError ( &rightexpr^.Token,
                        "This type is not directly usable\n" )
                END

                asgnnode^.Body.Assign.Right = rightexpr

                IF assigntoken.Subtype == TOKEN_EQUALS THEN
                    PrsCheckType (
                        &token, // errtoken
                        lefttype, // type1
                        righttype, // type2
                        "Assign: ", // errstring
                        FALSE, // equivalence
                    )

                    IF rightexpr^.Type == AST_CONSTANT THEN
                        // Check if the constant fits in the type.

                        PrsCheckConstant (
                            &rightexpr^.Token, // errtoken
                            lefttype, // type
                            rightexpr^.Body.Constant.Value, // body
                        )
                    END
                END

                PrsInsertNodeIntoBlock (
                    block, // block
                    asgnnode, // node
                )
            ELSE
                // Free floating expression. These are assumed to be the result
                // of a macro expansion and are elided from the AST completely
                // if they aren't either a load from a pointer, or a function
                // call. Containing either of these things nested within the
                // expression doesn't count.
                
                IF PrsHasSideEffect ( leftexpr ) THEN
                    PrsInsertNodeIntoBlock (
                        block, // block
                        leftexpr, // node
                    )
                END
            END
        END
    END

    // Restore the old block.

    PrsCurrentBlock = oldblock

    RETURN block
END

// Special operator parse routines.

FN (PrsOperatorF) PrsParseCompoundTypeIndex (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // Parse a compound type index. We need to evaluate the type of the left
    // side, and make sure it's really a compound type (i.e., a STRUCT or a
    // UNION). Then, we set the lexical scope to the one for the compound type's
    // field names, and collect the field name.

    left := node^.Body.Operator.Left

    type := PrsEvaluateType ( left )

    IF type^.Subtype != TYPE_COMPOUND THEN
        LexError ( &node^.Token, "Not a compound type\n" )
    END

    scope := type^.Body.Compound.FieldScope

    LexEnterOverlayScope ( scope )

    fieldtoken : LexToken

    IF NOT LexMatchToken (
        &fieldtoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &fieldtoken, "Expected an identifier\n" )
    END

    IF fieldtoken.Subtype != TOKEN_IDENTIFIER_FOUND THEN
        LexError ( &fieldtoken, "Non-existent field name\n" )
    END

    fieldsymbol := CAST fieldtoken.Payload TO ^LexSymbol

    node^.Body.Operator.OperatorSpecific = fieldsymbol

    LexExitOverlayScope ()
END

FN (PrsOperatorF) PrsParseArrayIndex (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // Parse an array index. We have to collect the index itself and the right
    // bracket.

    left := node^.Body.Operator.Left

    lefttype := PrsEvaluateType ( left )

    IF lefttype^.Subtype != TYPE_ARRAY AND
        lefttype^.Subtype != TYPE_POINTER THEN

        LexError ( &node^.Token,
            "Can only index an array type or a pointer type\n" )
    END

    right := PrsExpression ( 0 )

    PrsCheckNodeIsValue ( right )

    node^.Body.Operator.Right = right

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_RBRACKET, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a right bracket\n" )
    END

    IF lefttype^.Subtype == TYPE_ARRAY AND
        lefttype^.Body.Array.HasBound AND
        right^.Type == AST_CONSTANT THEN

        // Check the constant against the array bound.

        IF right^.Body.Constant.Value >= lefttype^.Body.Array.Bound THEN
            LexError ( &right^.Token,
                "Constant exceeds array bound\n" )
        END
    END
END

FN (PrsOperatorF) PrsParseFunctionCall (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // Parse a function call. We have to collect the arguments and the right
    // parenthesis. The head of the arguments list goes in the operator-specific
    // field.

    left := node^.Body.Operator.Left

    lefttype := PrsEvaluateType ( left )

    IF lefttype^.Subtype != TYPE_FUNCTION AND
        lefttype^.Subtype != TYPE_POINTER THEN

        LexError ( &node^.Token,
            "Expected function or function pointer\n" )
    END

    IF lefttype^.Subtype == TYPE_POINTER THEN
        // We have to unwrap the function pointer. First check that it's really
        // a function pointer.

        lefttype = lefttype^.Body.Pointer.Base

        IF lefttype^.Subtype != TYPE_FUNCTION THEN
            LexError ( &node^.Token,
                "Unexpected non-function pointer\n" )
        END

        // Create a new AST node.

        newnode := PrsCreateAstNode (
            AST_OPERATOR, // type
            &node^.Token, // token
        )

        // Fib the new node into being a pointer deref.

        newnode^.Token.Subtype = TOKEN_CARET
        newnode^.Body.Operator.Left = left

        // Now fib our node into pointing to the pointer deref.

        node^.Body.Operator.Left = newnode
    END

    varargcount := 0
    argcount := 0
    argtail : ^PrsAstNode = NULLPTR
    node^.Body.Operator.OperatorSpecific = NULLPTR
    refarg := lefttype^.Body.Function.ArgListHead

    token : LexToken

    WHILE TRUE DO
        IF LexMatchToken (
            &token, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            // Done with the argument list.

            BREAK
        END

        argcount += 1

        IF argcount > lefttype^.Body.Function.ArgCount AND
            NOT lefttype^.Body.Function.IsVarArg THEN

            LexError ( &node^.Token, "Too many arguments\n" )
        END

        IF refarg AND refarg^.InOut == ARG_OUT THEN
            IF NOT LexMatchToken (
                &token, // token
                TOKEN_ARGSPEC, // type
                TOKEN_OUT, // subtype
            ) THEN
                LexError ( &token,
                    "Expected OUT specifier on OUT argument\n" )
            END
        END

        argnode := PrsExpression ( 0 )

        argtype := PrsEvaluateType ( argnode )

        IF NOT PrsTypeIsValue (
            &argnode^.Token, // errtoken
            argtype, // type
        ) THEN
            LexError ( &argnode^.Token,
                "This type is not directly usable as a valuee\n" )
        END

        // If refarg became null, that means that we walked off into the varargs
        // part of the function arguments. Only check types before that happens.

        IF refarg THEN
            IF refarg^.InOut == ARG_OUT AND
                NOT PrsIsLvalue ( argnode ) THEN

                LexError ( &argnode^.Token,
                    "OUT arguments must be L-values\n" )
            END
        
            PrsCheckType (
                &argnode^.Token, // errtoken
                refarg^.Symbol^.SemanticType, // type1
                argtype, // type2
                "Function argument: ", // errstring
                FALSE, // equivalence
            )

            IF argnode^.Type == AST_CONSTANT THEN
                // Check if the constant fits in the type.

                PrsCheckConstant (
                    &argnode^.Token, // errtoken
                    refarg^.Symbol^.SemanticType, // type
                    argnode^.Body.Constant.Value, // body
                )
            END

            refarg = refarg^.Next
        
        ELSE
            // This is a vararg.

            varargcount += 1
        END

        argnode^.Next = NULLPTR

        IF NOT argtail THEN
            node^.Body.Operator.OperatorSpecific = argnode
        ELSE
            argtail^.Next = argnode
        END

        argtail = argnode

        IF LexMatchToken (
            &token, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            // Done with the argument list.

            BREAK
        END

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_COMMA, // type
            0, // subtype
        ) THEN
            // Bad.

            LexError ( &token,
                "Expected a comma or right parenthesis\n" )
        END
    END

    IF varargcount THEN
        vartable := PrsCurrentFunction^.Body.Function.VarTable
        vartabletype : ^LexSemanticType

        IF NOT vartable THEN
            // Create the var table symbol.

            status := TlBumpAlloc (
                SIZEOF LexSymbol, // bytes
                OUT vartable, // ptr
            )

            IF status THEN
                TlInternalError ( "Failed to allocate var table", 0, 0, 0 )
            END

            // Zero the symbol since it won't be properly initialized.

            TlFillMemoryWithByte (
                vartable, // ptr
                SIZEOF LexSymbol, // sz
                0, // byte
            )

            vartable^.Name = "VARTABLE"

            PrsCurrentFunction^.Body.Function.VarTable = vartable

            // Create the type.

            status = TlBumpAlloc (
                SIZEOF LexSemanticType, // bytes
                OUT vartabletype, // ptr
            )

            vartabletype^.Subtype = TYPE_ARRAY
            vartabletype^.Body.Array.Base = PrsNullPtrType
            vartabletype^.Body.Array.HasBound = FALSE
            vartabletype^.Size = 0

            vartable^.SemanticType = vartabletype

        ELSE
            vartabletype = vartable^.SemanticType
        END

        vartablesize := varargcount * JklTargetInfo^.PointerSize

        IF vartablesize > vartabletype^.Size THEN
            // Extend the vartable.

            vartabletype^.Size = vartablesize
        END
    END

    node^.Body.Operator.VarArgCount = varargcount

    IF argcount < lefttype^.Body.Function.ArgCount THEN
        LexError ( &node^.Token, "Too few arguments\n" )
    END
END

FN (PrsOperatorF) PrsParsePtrDereference (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left

    // Check that the left side is a pointer type.

    lefttype := PrsEvaluateType ( left )

    IF lefttype^.Subtype != TYPE_POINTER THEN
        LexError ( &node^.Token, "Expected a pointer type\n" )
    END
END

FN (PrsOperatorF) PrsParseMul (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type != AST_CONSTANT AND right^.Type != AST_CONSTANT THEN
        // No opportunities for simplification.

        LEAVE
    END

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value * right^.Body.Constant.Value

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END

    IF right^.Type == AST_CONSTANT THEN
        IF right^.Body.Constant.Value == 0 THEN
            // We can roll this into the constant zero.

            node^.Type = AST_CONSTANT

            node^.Body.Constant.Value = 0

            LEAVE

        ELSEIF right^.Body.Constant.Value == 1 THEN
            // We can roll this into the left side.

            TlCopyMemory (
                node, // dest
                left, // src
                SIZEOF PrsAstNode, // sz
            )

            LEAVE
        END

        pwrtwo := TlIsPowerOfTwo ( right^.Body.Constant.Value )

        IF pwrtwo != -1 THEN
            // Cool, it's a power of two, we can reduce this into a left shift.

            node^.Token.Subtype = TOKEN_LEFTSHIFT

            right^.Body.Constant.Value = pwrtwo

            LEAVE
        END
    END
END

FN (PrsOperatorF) PrsParseDivide (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type != AST_CONSTANT AND right^.Type != AST_CONSTANT THEN
        // No opportunities for simplification.

        LEAVE
    END

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        IF right^.Body.Constant.Value == 0 THEN
            LexError ( &node^.Token, "Division by zero not allowed\n" )
        END

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value / right^.Body.Constant.Value

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 1 THEN
        // We can roll this into the left side.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode, // sz
        )

        LEAVE
    END
END

FN (PrsOperatorF) PrsParseModulo (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type != AST_CONSTANT AND right^.Type != AST_CONSTANT THEN
        // No opportunities for simplification.

        LEAVE
    END

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        IF right^.Body.Constant.Value == 0 THEN
            LexError ( &node^.Token, "Modulo by zero not allowed\n" )
        END

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value % right^.Body.Constant.Value

        LEAVE
    END

    IF right^.Type == AST_CONSTANT THEN
        IF right^.Body.Constant.Value == 1 THEN
            // We can turn this into the constant zero.

            node^.Type = AST_CONSTANT

            node^.Body.Constant.Value = 0

            LEAVE
        END

        pwrtwo := TlIsPowerOfTwo ( right^.Body.Constant.Value )

        IF pwrtwo != -1 THEN
            // Cool, it's a power of two, we can reduce this into a bit mask.

            node^.Token.Subtype = TOKEN_BITAND

            right^.Body.Constant.Value = right^.Body.Constant.Value - 1

            LEAVE
        END
    END
END

FN (PrsOperatorF) PrsParsePlus (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type != AST_CONSTANT AND right^.Type != AST_CONSTANT THEN
        // No opportunities for simplification.

        LEAVE
    END

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value + right^.Body.Constant.Value

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0 THEN
        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END

    // Check various arithmetic cases for simplification.
    // TODO test these more thoroughly

    IF left^.Type == AST_OPERATOR THEN
        b := right^.Body.Constant.Value

        IF left^.Token.Subtype == TOKEN_PLUS AND
            left^.Body.Operator.Right^.Type == AST_CONSTANT THEN

            // (x + a) + b -> x + (a + b)

            a := left^.Body.Operator.Right^.Body.Constant.Value

            right^.Body.Constant.Value = a + b

            node^.Body.Operator.Left = left^.Body.Operator.Left

            LEAVE

        ELSEIF left^.Token.Subtype == TOKEN_MINUS AND
            left^.Body.Operator.Right^.Type == AST_CONSTANT THEN

            // (x - a) + b -> x - (a - b)

            a := left^.Body.Operator.Right^.Body.Constant.Value

            right^.Body.Constant.Value = a - b

            node^.Body.Operator.Left = left^.Body.Operator.Left
            node^.Token.Subtype = TOKEN_MINUS

            LEAVE

        ELSEIF left^.Token.Subtype == TOKEN_MINUS AND
            left^.Body.Operator.Left^.Type == AST_CONSTANT THEN

            // (a - x) + b -> (a + b) - x

            a := left^.Body.Operator.Left^.Body.Constant.Value

            node^.Body.Operator.Left = right

            right^.Body.Constant.Value = a + b

            node^.Body.Operator.Right = left^.Body.Operator.Right
            node^.Token.Subtype = TOKEN_MINUS

            LEAVE
        END
    END
END

FN (PrsOperatorF) PrsParseMinus (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type != AST_CONSTANT AND right^.Type != AST_CONSTANT THEN
        // No opportunities for simplification.

        LEAVE
    END

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value - right^.Body.Constant.Value

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0 THEN
        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )

        LEAVE
    END

    // Check various arithmetic cases for simplification.
    // TODO test these more thoroughly

    IF left^.Type == AST_OPERATOR THEN
        b := right^.Body.Constant.Value

        IF left^.Token.Subtype == TOKEN_MINUS THEN
            IF left^.Body.Operator.Right^.Type == AST_CONSTANT THEN
                // (x - a) - b  ->  x - (a + b)

                a := left^.Body.Operator.Right^.Body.Constant.Value

                right^.Body.Constant.Value = a + b

                node^.Body.Operator.Left = left^.Body.Operator.Left

                LEAVE

            ELSEIF left^.Body.Operator.Left^.Type == AST_CONSTANT THEN
                // (a - x) - b  ->  (a - b) - x

                a := left^.Body.Operator.Left^.Body.Constant.Value

                right^.Body.Constant.Value = a - b

                node^.Body.Operator.Left = right
                node^.Body.Operator.Right = left^.Body.Operator.Right

                LEAVE
            END

        ELSEIF left^.Token.Subtype == TOKEN_PLUS AND
            left^.Body.Operator.Right^.Type == AST_CONSTANT THEN

            // (x + a) - b -> x + (a - b)

            a := left^.Body.Operator.Right^.Body.Constant.Value

            right^.Body.Constant.Value = a - b

            node^.Token.Subtype = TOKEN_PLUS
            node^.Body.Operator.Left = left^.Body.Operator.Left

            LEAVE
        END
    END

    IF right^.Type == AST_OPERATOR THEN
        b := left^.Body.Constant.Value

        IF right^.Token.Subtype == TOKEN_MINUS THEN
            IF right^.Body.Operator.Right^.Type == AST_CONSTANT THEN
                // b - (x - a) -> (a + b) - x

                a := right^.Body.Operator.Right^.Body.Constant.Value

                left^.Body.Constant.Value = a + b

                node^.Body.Operator.Right = right^.Body.Operator.Left

                LEAVE

            ELSEIF right^.Body.Operator.Left^.Type == AST_CONSTANT THEN
                // b - (a - x) -> x + (b - a)

                a := right^.Body.Operator.Left^.Body.Constant.Value

                left^.Body.Constant.Value = b - a

                node^.Token.Subtype = TOKEN_PLUS
                node^.Body.Operator.Left = right^.Body.Operator.Right

                LEAVE
            END

        ELSEIF right^.Token.Subtype == TOKEN_PLUS AND
            right^.Body.Operator.Right^.Type == AST_CONSTANT THEN
            
            // b - (x + a) -> (b - a) - x

            a := right^.Body.Operator.Right^.Body.Constant.Value

            left^.Body.Constant.Value = b - a

            node^.Body.Operator.Right = right^.Body.Operator.Left

            LEAVE
        END
    END
END

FN (PrsOperatorF) PrsParseLeftShift (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value << right^.Body.Constant.Value

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0 THEN
        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )
    END
END

FN (PrsOperatorF) PrsParseRightShift (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value >> right^.Body.Constant.Value

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0 THEN
        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )
    END
END

FN (PrsOperatorF) PrsParseBitAnd (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value & right^.Body.Constant.Value

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END

    IF (right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0) THEN
        // We can roll this into the constant zero.

        node^.Type = AST_CONSTANT
        node^.Body.Constant.Value = 0

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND
        right^.Body.Constant.Value == TL_MACHINE_WORD_MAX THEN

        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )
    END
END

FN (PrsOperatorF) PrsParseBitXor (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value $ right^.Body.Constant.Value

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0 THEN
        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )

        LEAVE
    END

    IF right^.Type == AST_CONSTANT AND
        right^.Body.Constant.Value == TL_MACHINE_WORD_MAX THEN

        // Turn this node into a bitwise NOT of the left side.

        node^.Type = AST_OPERATOR
        node^.Token.Subtype = TOKEN_BITNOT
    END
END

FN (PrsOperatorF) PrsParseBitOr (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value | right^.Body.Constant.Value

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END

    IF right^.Type == AST_CONSTANT AND right^.Body.Constant.Value == 0 THEN
        // No effect. Copy the left node over us.

        TlCopyMemory (
            node, // dest
            left, // src
            SIZEOF PrsAstNode
        )
    END
END

FN (PrsOperatorF) PrsParseLessThan (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value < right^.Body.Constant.Value
    END
END

FN (PrsOperatorF) PrsParseGreaterThan (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value > right^.Body.Constant.Value
    END
END

FN (PrsOperatorF) PrsParseLtEq (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value <= right^.Body.Constant.Value
    END
END

FN (PrsOperatorF) PrsParseGtEq (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value >= right^.Body.Constant.Value
    END
END

FN (PrsOperatorF) PrsParseEquiv (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value == right^.Body.Constant.Value

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END
END

FN (PrsOperatorF) PrsParseNotEquiv (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value != right^.Body.Constant.Value

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // Shuffle it to the right side; this is somewhat simplifying since
        // we're commutative.

        node^.Body.Operator.Right = left
        node^.Body.Operator.Left = right

        left = right
        right = node^.Body.Operator.Right
    END
END

FN (PrsOperatorF) PrsParseAnd (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value AND right^.Body.Constant.Value

        LEAVE
    END
END

FN (PrsOperatorF) PrsParseOr (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    PrsCheckNodeIsValue ( left )
    PrsCheckNodeIsValue ( right )

    IF left^.Type == AST_CONSTANT AND right^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT

        node^.Body.Constant.Value =
            left^.Body.Constant.Value OR right^.Body.Constant.Value
    END
END

// Special left-operator parse routines.

FN (PrsOperatorF) PrsParseAddrOf (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // Parse an addr-of operation. This just sets the operation type to
    // TOKEN_ADDROF, to distinguish it from a bitwise AND.

    node^.Token.Subtype = TOKEN_ADDROF

    left := node^.Body.Operator.Left

    // Check to make sure that it makes any sense to take the address here.
    // We can only take the address of l-values.

    IF NOT PrsIsLvalue ( left ) THEN
        LexError ( &left^.Token, "Not a valid L-value\n" )
    END

    IF left^.Type == AST_IDENTIFIER THEN
        symbol := CAST left^.Token.Payload TO ^LexSymbol

        IF symbol^.Entry.HashTable != &LexRootScope^.HashTable THEN
            // We can only take the address of compound locals.

            type := PrsEvaluateType ( left )

            IF type^.Subtype != TYPE_COMPOUND THEN
                LexError ( &left^.Token,
                    "Can't take address of a non-compound local\n" )
            END
        END
    END
END

FN (PrsOperatorF) PrsParseInverse (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left

    PrsCheckNodeIsValue ( left )

    IF left^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT
        node^.Body.Constant.Value = -left^.Body.Constant.Value

        LEAVE
    END

    // Parse an inverse operation. Turn it into 0 - x.

    zeronode := PrsCreateAstNode (
        AST_CONSTANT, // type
        &node^.Token, // token
    )

    zeronode^.Type = AST_CONSTANT
    zeronode^.Body.Constant.Value = 0

    node^.Token.Subtype = TOKEN_MINUS

    node^.Body.Operator.Right = node^.Body.Operator.Left
    node^.Body.Operator.Left = zeronode
END

FN (PrsOperatorF) PrsParseNot (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left

    PrsCheckNodeIsValue ( left )

    IF left^.Type == AST_OPERATOR AND left^.Token.Subtype == TOKEN_NOT THEN
        // Get rid of the redundant NOTs by copying the left side of our left
        // side over the top of us.

        TlCopyMemory (
            node, // dest
            left^.Body.Operator.Left, // src
            SIZEOF PrsAstNode, // sz
        )

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT
        node^.Body.Constant.Value = NOT left^.Body.Constant.Value
    END
END

FN (PrsOperatorF) PrsParseBitNot (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    left := node^.Body.Operator.Left

    PrsCheckNodeIsValue ( left )

    IF left^.Type == AST_OPERATOR AND left^.Token.Subtype == TOKEN_BITNOT THEN
        // Get rid of the redundant NOTs by copying the left side of our left
        // side over the top of us.

        TlCopyMemory (
            node, // dest
            left^.Body.Operator.Left, // src
            SIZEOF PrsAstNode, // sz
        )

        LEAVE
    END

    IF left^.Type == AST_CONSTANT THEN
        // We can roll this into a constant.

        node^.Type = AST_CONSTANT
        node^.Body.Constant.Value = ~left^.Body.Constant.Value
    END
END

FN (PrsOperatorF) PrsParseCast (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // Parse a cast. This takes the form CAST [expression] TO [type].

    node^.Body.Operator.Left = PrsExpression ( 0 )

    PrsCheckNodeIsValue ( node^.Body.Operator.Left )

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_OTHER, // type
        TOKEN_TO, // subtype
    ) THEN
        LexError ( &token, "Expected TO.\n" )
    END

    type := PrsCreateType ()

    PrsType (
        type, // type
        0, // depth
    )

    // The type goes in the operator-specific field.

    node^.Body.Operator.OperatorSpecific = type
END

FN (PrsOperatorF) PrsParseContainerOf (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // This takes the form CONTAINEROF x TO StructName.FieldName and turns it
    // into essentially CAST (x - OFFSETOF StructName.FieldName) TO ^StructName.

    subnode := PrsCreateAstNode (
        AST_OPERATOR, // type
        &node^.Token, // token
    )

    subnode^.Token.Subtype = TOKEN_MINUS
    subnode^.Body.Operator.Left = PrsExpression ( 0 )

    PrsCheckNodeIsValue ( subnode^.Body.Operator.Left )

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_OTHER, // type
        TOKEN_TO, // subtype
    ) THEN
        LexError ( &token, "Expected TO.\n" )
    END
    
    offset : UWORD

    type := PrsFieldSequence (
        OUT offset, // offset
    )

    constnode := PrsCreateAstNode (
        AST_CONSTANT,
        &token, // token
    )

    constnode^.Body.Constant.Value = offset

    subnode^.Body.Operator.Right = constnode

    // Turn our own AST node into a cast, with the subtraction node as the left
    // side.

    node^.Token.Subtype = TOKEN_CAST
    node^.Body.Operator.Left = subnode

    // Create a pointer-to type.

    ptrtype := PrsCreateType ()
    ptrtype^.Subtype = TYPE_POINTER
    ptrtype^.Body.Pointer.Base = type

    ptrtype^.Size = JklTargetInfo^.PointerSize
    ptrtype^.MinimumAlignment = JklTargetInfo^.PointerAlignment

    // The type goes in the operator-specific field.

    node^.Body.Operator.OperatorSpecific = ptrtype
END

FN (PrsOperatorF) PrsParseSizeOfValue (
    IN operator : ^VOID,
    IN node : ^PrsAstNode,
)

    // We have to figure out the size of the type of the value, and convert our
    // node to a constant node containing this size.

    type := PrsEvaluateType ( node^.Body.Operator.Left )

    IF type^.Size == TYPE_SIZE_UNINIT THEN
        LexError ( &node^.Token,
            "Can't take the size of this type\n" )
    END

    node^.Type = AST_CONSTANT
    node^.Body.Constant.Value = type^.Size
END

// Declarator parse routines.

FN PrsCreateNamedType (
    IN token : ^LexToken,
) : ^LexSymbol

    // Common part of creating a named type, such as an ENUM, a TYPE, an FNPTR,
    // etc.

    symbol := CAST token^.Payload TO ^LexSymbol

    IF token^.Subtype == TOKEN_IDENTIFIER_FOUND THEN
        // We must be overriding a forward-declared type, otherwise this is a no
        // go.

        IF symbol^.Type != SYM_FORWARD_TYPE THEN
            LexError ( token, "Identifier already in use\n" )
        END
    END

    symbol^.Type = SYM_TYPE

    RETURN symbol
END

FN (PrsDeclaratorF) PrsParseEnum () : ^LexSymbol

    // Parse an ENUM declaration.

    nametoken : LexToken

    IF NOT LexMatchToken (
        &nametoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &nametoken, "Expected an identifier\n" )
    END

    symbol := PrsCreateNamedType ( &nametoken )

    colontoken : LexToken

    IF NOT LexMatchToken (
        &colontoken, // token
        TOKEN_COLON, // type
        0, // subtype
    ) THEN
        LexError ( &colontoken, "Expected a type\n" )
    END

    type := PrsCreateType ()

    PrsType (
        type, // type
        0, // depth
    )

    symbol^.SemanticType = type

    // Parse the list of constant names.
    // These are of the form:
    //
    // NAME
    // NAME = NewPosition

    token : LexToken

    value : UWORD = 0

    WHILE TRUE DO
        IF LexMatchToken (
            &token, // token
            TOKEN_TERMINATOR, // type
            TOKEN_END, // subtype
        ) THEN
            // Done with the constant list.

            BREAK
        END

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_IDENTIFIER, // type
            0, // subtype
        ) THEN
            LexError ( &token, "Expected an identifier\n" )
        END

        IF token.Subtype == TOKEN_IDENTIFIER_FOUND THEN
            LexError ( &token, "Identifier already in use\n" )
        END

        constsymbol := CAST token.Payload TO ^LexSymbol

        constsymbol^.Type = SYM_CONSTANT
        constsymbol^.Value = value

        IF LexMatchToken (
            &token, // token
            TOKEN_ASSIGN, // type
            TOKEN_EQUALS, // subtype
        ) THEN
            // Set a new position for the constant values.

            newposnode := PrsExpression ( 0 )

            IF newposnode^.Type != AST_CONSTANT THEN
                LexError ( &newposnode^.Token,
                    "Expected a constant value\n" )
            END

            value = newposnode^.Body.Constant.Value
            constsymbol^.Value = value
        END

        value += 1

        IF LexMatchToken (
            &token, // token
            TOKEN_TERMINATOR, // type
            TOKEN_END, // subtype
        ) THEN
            // Done with the constant list.

            BREAK
        END

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_COMMA, // type
            0, // subtype
        ) THEN
            // Bad.

            LexError ( &token,
                "Expected a comma or END\n" )
        END
    END

    RETURN symbol
END

FN PrsParseFnSignature (
    IN flags : ULONG,
    IN fnptr : UBYTE,
    OUT outsymbol : ^LexSymbol,
    OUT oldscope : ^TlSymbolTable,
) : ^LexSemanticType

    // Parse a function signature and return a type structure for it.

    // A Jackal function signature takes one of the following forms:
    //
    // (FNPTR) NAME (IN/OUT ARG : TYPE, ...)
    // NAME (IN/OUT ARG : TYPE, ...)

    fnptrtype : ^LexSemanticType = NULLPTR

    IF LexMatchToken (
        NULLPTR, // token
        TOKEN_OPER, // type
        TOKEN_LPAREN, // subtype
    ) THEN
        // An FNPTR name is specified. Collect it.

        fnptrtoken : LexToken

        IF NOT LexMatchToken (
            &fnptrtoken, // token
            TOKEN_IDENTIFIER, // type
            0, // subtype
        ) THEN
            LexError ( &fnptrtoken, "Expected an identifier\n" )
        END

        IF fnptrtoken.Subtype == TOKEN_IDENTIFIER_NEW THEN
            LexError ( &fnptrtoken, "Undeclared identifier\n" )
        END

        IF fnptr THEN
            LexError ( &fnptrtoken, "FNPTR not allowed on an FNPTR\n" )
        END

        symbol := CAST fnptrtoken.Payload TO ^LexSymbol

        IF symbol^.Type != SYM_TYPE THEN
            LexError ( &fnptrtoken, "Symbol isn't a type\n" )
        END

        fnptrtype = symbol^.SemanticType

        IF fnptrtype^.Subtype != TYPE_POINTER THEN
            LexError ( &fnptrtoken, "Type isn't a function pointer\n" )
        END

        fnptrtype = fnptrtype^.Body.Pointer.Base

        IF fnptrtype^.Subtype != TYPE_FUNCTION THEN
            LexError ( &fnptrtoken, "Type isn't a function pointer\n" )
        END

        IF NOT LexMatchToken (
            &fnptrtoken, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            LexError ( &fnptrtoken, "Expected a right parenthesis.\n" )
        END
    END

    // Collect the name.

    nametoken : LexToken

    IF NOT LexMatchToken (
        &nametoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &nametoken, "Expected an identifier\n" )
    END

    symbol := CAST nametoken.Payload TO ^LexSymbol

    // We should see if there's a pending section override from the lexer, and
    // do it now if so.

    IF LexNextSymbolSection THEN
        // There was a single-symbol section override via SECTION directive.

        symbol^.Section = LexNextSymbolSection
        LexNextSymbolSection = NULLPTR

    ELSE
        symbol^.Section = LexCurrentSection
    END

    IF fnptr THEN
        PrsCreateNamedType (
            &nametoken, // token
        )
    END

    // We'll verify stuff about the name token after we've fully assembled the
    // type.

    parentoken : LexToken

    IF NOT LexMatchToken (
        &parentoken, // token
        TOKEN_OPER, // type
        TOKEN_LPAREN, // subtype
    ) THEN
        LexError ( &parentoken, "Expected a left parenthesis\n" )
    END

    type := PrsCreateType ()

    type^.Subtype = TYPE_FUNCTION

    // We have to create a scope atop the global scope to contain the function
    // arguments. This scope will also be used as the function scope.

    oldscope = LexEnterScope (
        NULLPTR, // scope
    )

    type^.Body.Function.FuncScope = LexCurrentScope
    type^.Body.Function.ArgListHead = NULLPTR
    type^.Body.Function.ReturnType = NULLPTR
    type^.Body.Function.FnPtrType = NULLPTR
    type^.Body.Function.ArgCount = 0
    type^.Body.Function.IsVarArg = FALSE
    type^.Body.Function.IsFnPtr = fnptr
    type^.Body.Function.VarArgCount = NULLPTR
    type^.Body.Function.VarArgTable = NULLPTR
    type^.Body.Function.VarTable = NULLPTR
    type^.Body.Function.BodyBlock = NULLPTR

    argtail : ^LexFunctionArgument = NULLPTR

    // Parse the list of arguments.
    // These are of the form:
    //
    // IN NAME : TYPE
    // OUT NAME : TYPE

    checktoken : LexToken

    WHILE TRUE DO
        IF LexMatchToken (
            &checktoken, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            // Done with the argument list.

            BREAK
        END

        arg : ^LexFunctionArgument

        status := TlBumpAlloc (
            SIZEOF LexFunctionArgument, // bytes
            OUT arg, // ptr
        )

        IF status THEN
            TlInternalError ( "Failed to allocate arg", 0, 0, 0 )
        END

        argtoken : LexToken

        LexGetToken ( &checktoken )

        IF checktoken.Type != TOKEN_ARGSPEC THEN
            LexError ( &checktoken,
                "Expected an argument specifier IN/OUT\n" )
        END

        IF checktoken.Subtype == TOKEN_IN THEN
            arg^.InOut = ARG_IN

        ELSEIF checktoken.Subtype == TOKEN_OUT THEN
            arg^.InOut = ARG_OUT

        ELSEIF checktoken.Subtype == TOKEN_VARARG THEN
            type^.Body.Function.IsVarArg = TRUE

            IF NOT fnptr THEN
                // The next two identifier tokens are the name of the vararg
                // array and the count respectively. We have to collect
                // those and set them up.

                varargtoken : LexToken

                IF NOT LexMatchToken (
                    &varargtoken, // token
                    TOKEN_IDENTIFIER, // type
                    0, // subtype
                ) THEN
                    LexError ( &varargtoken,
                        "Expected identifier\n" )
                END

                IF varargtoken.Subtype == TOKEN_IDENTIFIER_FOUND THEN
                    LexError ( &varargtoken,
                        "Identifier already in use\n" )
                END

                varargtablesymbol := CAST varargtoken.Payload TO ^LexSymbol

                varargtablesymbol^.Type = SYM_VAR
                varargtablesymbol^.Flags = 0
                varargtablesymbol^.ParameterType = ARG_IN

                type^.Body.Function.VarArgTable = varargtablesymbol

                // The type of the vararg table is pointer to pointer to void.

                varargtablesymbol^.SemanticType = PrsVarArgType

                // Now yoink the count.

                IF NOT LexMatchToken (
                    &varargtoken, // token
                    TOKEN_IDENTIFIER, // type
                    0, // subtype
                ) THEN
                    LexError ( &varargtoken,
                        "Expected identifier\n" )
                END

                IF varargtoken.Subtype == TOKEN_IDENTIFIER_FOUND THEN
                    LexError ( &varargtoken,
                        "Identifier already in use\n" )
                END

                varargcountsymbol := CAST varargtoken.Payload TO ^LexSymbol

                varargcountsymbol^.Type = SYM_VAR
                varargcountsymbol^.Flags = 0
                varargcountsymbol^.ParameterType = ARG_IN

                type^.Body.Function.VarArgCount = varargcountsymbol

                // The type of the vararg count is the constant type, which
                // is the largest unsigned type supported by the target.

                varargcountsymbol^.SemanticType = PrsConstantType
            END

            // No more arguments are allowed after the vararg specifier.

            IF NOT LexMatchToken (
                &checktoken, // token
                TOKEN_RPAREN, // type
                0, // subtype
            ) THEN
                LexError ( &checktoken,
                    "Expected right parenthesis\n" )
            END

            BREAK
        END

        type^.Body.Function.ArgCount += 1

        arg^.Next = NULLPTR

        IF NOT argtail THEN
            type^.Body.Function.ArgListHead = arg

        ELSE
            argtail^.Next = arg
        END

        argtail = arg

        LexGetToken ( &argtoken )

        IF argtoken.Type != TOKEN_IDENTIFIER THEN
            LexError ( &argtoken, "Expected an identifier", 0, 0, 0)
        END

        IF argtoken.Subtype == TOKEN_IDENTIFIER_FOUND THEN
            LexError ( &argtoken,
                "Identifier already in use\n" )
        END

        LexCopyToken (
            &arg^.Token, // dest
            &argtoken, // src
        )

        argsymbol := CAST argtoken.Payload TO ^LexSymbol

        argsymbol^.Type = SYM_VAR
        argsymbol^.Flags = 0

        arg^.Symbol = argsymbol

        argsymbol^.ParameterType = arg^.InOut

        IF NOT LexMatchToken (
            &checktoken, // token
            TOKEN_COLON, // type
            0, // subtype
        ) THEN
            LexError ( &checktoken, "Expected a type\n" )
        END

        argsymbol^.SemanticType = PrsCreateType ()

        // Reset scope while parsing type.

        funcargscope := LexResetScope ( oldscope )

        PrsType (
            argsymbol^.SemanticType, // type
            0, // depth
        )

        LexResetScope ( funcargscope )

        IF NOT PrsTypeIsValue (
            &argtoken, // errtoken
            argsymbol^.SemanticType, // type
        ) THEN
            LexError (  &argtoken,
                "Argument type is not directly usable as a value\n" )
        END

        IF LexMatchToken (
            &checktoken, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            // Done with the argument list.

            BREAK
        END

        IF NOT LexMatchToken (
            &checktoken, // token
            TOKEN_COMMA, // type
            0, // subtype
        ) THEN
            // Bad.

            LexError ( &checktoken,
                "Expected a comma or right parenthesis\n" )
        END
    END

    IF fnptr OR flags & VAR_FLAG_EXTERN THEN
        // There's no body, so reset the scope now, or the lookahead might
        // mistakenly pull a symbol into our scope. This is kind of hacky.

        LexResetScope ( oldscope )

    ELSE
        // The body has started so push the indicator byte to the block stack.

        TlInsertDynamicBuffer (
            &PrsBlockStack, // array
            BLOCK_PLAIN_BODY, // byte
        )

        LexCurrentFunctionSymbol = symbol
    END

    IF LexMatchToken (
        NULLPTR, // token
        TOKEN_COLON, // type
        0, // subtype
    ) THEN
        // There's a return type!

        returntype := PrsCreateType ()

        PrsType (
            returntype, // type
            0, // depth
        )

        IF NOT PrsTypeIsValue (
            &nametoken, // errtoken
            returntype, // type
        ) THEN
            LexError (  &nametoken,
                "Return type is not directly usable as a value\n" )
        END

        type^.Body.Function.ReturnType = returntype
    END

#IF 0
    IF NOT fnptr AND (flags & VAR_FLAG_EXTERN == 0) THEN
        // There's a body, so only reset the scope now. We waited until after we
        // looked for the colon because otherwise lookahead might pull a symbol
        // from the function body into the global scope.

        // XXX Nevermind - we stay in the function's scope while the body is
        //     parsed. This IF statement is commented out.

        LexResetScope ( oldscope )
    END
#END

    IF fnptrtype THEN
        PrsCheckType (
            &nametoken, // errtoken
            fnptrtype, // type1
            type, // type2
            "FNPTR: ", // errstring
            TRUE, // equivalence
        )

        type^.Body.Function.FnPtrType = fnptrtype
    END

    IF NOT fnptr THEN
        // Now that we have the type, do the found-symbol processing.

        PrsFoundSymbol (
            &nametoken, // token
            symbol, // symbol
            flags, // flags
            TRUE, // global
            type, // newtype
        )
    END

    outsymbol = symbol

    RETURN type
END

FN PrsParseFnDeclaration (
    IN flags : ULONG,
) : ^LexSymbol

    // Parse a function declaration. If the flags specify EXTERN, there is no
    // body.

    symbol : ^LexSymbol
    oldscope : ^TlSymbolTable

    type := PrsParseFnSignature (
        flags, // flags
        FALSE, // fnptr
        OUT symbol, // symbol
        OUT oldscope, // oldscope
    )

    IF flags & VAR_FLAG_EXTERN THEN
        RETURN symbol
    END

    IF symbol^.Section == &LexDefaultSection THEN
        symbol^.Section = &LexTextSection
    END

    type^.MinimumAlignment = JklTargetInfo^.CodeAlignment

    // Collect the body of the function.

#IF 0
    // First resume the argument scope.

    // XXX Nevermind - we're still inside it by the action of
    //     PrsParseFnSignature.

    oldscope := LexEnterScope (
        type^.Body.Function.FuncScope, // scope
    )
#END

    PrsCurrentFunction = type

    terminator : LexTokenSubtype

    type^.Body.Function.BodyBlock = PrsParseBlock (
        OUT terminator, // terminator
    )

    LexCurrentFunctionSymbol = NULLPTR
    PrsCurrentFunction = NULLPTR

    TlPopDynamicBuffer ( &PrsBlockStack )

    LexResetScope ( oldscope )

    symbol^.NextFunction = NULLPTR

    IF PrsFunctionListTail THEN
        PrsFunctionListTail^.NextFunction = symbol

    ELSE
        PrsFunctionListHead = symbol
    END

    PrsFunctionListTail = symbol

    RETURN symbol
END

FN (PrsDeclaratorF) PrsParseFn () : ^LexSymbol

    // Parse a function declaration.

    RETURN PrsParseFnDeclaration (
        VAR_FLAG_PUBLIC, // flags
    )
END

FN (PrsDeclaratorF) PrsParseFnPtr () : ^LexSymbol

    // Parse a function pointer named type declaration.

    symbol : ^LexSymbol
    oldscope : ^TlSymbolTable

    type := PrsParseFnSignature (
        0, // flags
        TRUE, // fnptr
        OUT symbol, // symbol
        OUT oldscope, // oldscope
    )

    // Wrap a pointer type around the given type.

    ptrtype := PrsCreateType ()

    ptrtype^.Subtype = TYPE_POINTER
    ptrtype^.Body.Pointer.Base = type
    ptrtype^.Size = JklTargetInfo^.PointerSize
    ptrtype^.MinimumAlignment = JklTargetInfo^.PointerAlignment

    symbol^.SemanticType = ptrtype

    RETURN symbol
END

FN PrsParseCompoundType (
    IN subtype : LexTokenSubtype,
    IN ispacked : UBYTE,
) : ^LexSymbol

    // XXX remember bit fields, and that bit field types must only be primitive
    //     types, and that unions cant have bit fields
    // XXX remember that non-pointer references to undeclared STRUCTs are
    //     absolutely forbidden! may require a new argument on PrsType
    // XXX remember that we want to calculate the size of the struct and its
    //     field offsets right now.
    // XXX remember that it might be possible to use the same type structure as
    //     unions because we can have each field be defined only by offset and
    //     type, and in a union the offsets would just all be zero. we can
    //     also probably share most of the parsing logic between structs and
    //     unions.
    // XXX remember that we can probably go back and have types contain their
    //     size where applicable. where not applicable the size should be a
    //     magical value like -1 indicating that the type is not directly
    //     assignable (which means it isn't legal in a struct and union).
    // XXX remember that struct fields must have declarable types
    // XXX remember that struct fields should be aligned unless packed and that
    //     the minimum alignment of the compound type must be the maximum of the
    //     required alignments for each field type

    // We keep track of all of the struct field names in their own symbol table.

    fieldscope := TlCreateSymbolTable (
        NULLPTR, // outerscope
        NULLPTR, // deletefunc
    )

    nametoken : LexToken

    IF NOT LexMatchToken (
        &nametoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &nametoken, "Expected an identifier\n" )
    END

    symbol := PrsCreateNamedType ( &nametoken )

    type := PrsCreateType ()

    type^.Subtype = TYPE_COMPOUND

    type^.Body.Compound.FieldScope = fieldscope
    type^.Body.Compound.IsPacked = ispacked

    symbol^.SemanticType = type

    minalignment := 1

    offset : UWORD = 0

    WHILE TRUE DO
        LexEnterOverlayScope ( fieldscope )

        IF LexMatchToken (
            NULLPTR, // token
            TOKEN_TERMINATOR, // type
            TOKEN_END, // subtype
        ) THEN
            LexExitOverlayScope ()

            // We're done with the struct.

            BREAK
        END

        fieldtoken : LexToken

        IF NOT LexMatchToken (
            &fieldtoken, // token
            TOKEN_IDENTIFIER, // type
            0, // subtype
        ) THEN
            LexError ( &fieldtoken, "Expected an identifier\n" )
        END

        IF fieldtoken.Subtype != TOKEN_IDENTIFIER_NEW THEN
            LexError ( &fieldtoken, "Field name already in use\n" )
        END

        fieldsymbol := CAST fieldtoken.Payload TO ^LexSymbol

        LexExitOverlayScope ()

        colontoken : LexToken

        IF NOT LexMatchToken (
            &colontoken, // token
            TOKEN_COLON, // type
            0, // subtype
        ) THEN
            LexError ( &colontoken, "Expected a type\n" )
        END

        fieldtype := PrsCreateType ()

        fieldsymbol^.SemanticType = fieldtype

        PrsType (
            fieldtype, // type
            0, // depth
        )

        // Skip names.

        WHILE fieldtype^.Subtype == TYPE_NAMED DO
            IF fieldtype^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
                // Forward declared type that we don't know anything about yet.

                LexError ( &fieldtoken,
                    "Illegal use of undeclared type\n" )
            END

            fieldtype = fieldtype^.Body.Named.Symbol^.SemanticType
        END

        IF NOT PrsTypeIsDeclarable (
            &fieldtoken, // errtoken
            fieldtype, // type
        ) THEN
            LexError ( &fieldtoken,
                "This type is not directly declarable\n" )
        END

        IF fieldtype^.Size == TYPE_SIZE_UNINIT THEN
            LexError ( &fieldtoken,
                "This type is not suitable as a field in a compound type\n" )
        END

        IF fieldtype^.MinimumAlignment > minalignment THEN
            minalignment = fieldtype^.MinimumAlignment
        END

        IF subtype == TOKEN_STRUCT THEN
            IF NOT ispacked THEN
                // Align the offset.

                offset += fieldtype^.MinimumAlignment - 1
                offset &= ~(fieldtype^.MinimumAlignment - 1)
            END

            // Save the offset.

            fieldsymbol^.Value = offset

            // Increment the offset by the size of this field.

            offset += fieldtype^.Size

        ELSE
            // This is a union, the offset of all fields is zero.

            fieldsymbol^.Value = 0

            IF fieldtype^.Size > offset THEN
                offset = fieldtype^.Size
            END
        END

        IF LexMatchToken (
            &colontoken, // token
            TOKEN_TERMINATOR, // type
            TOKEN_END, // subtype
        ) THEN
            // Done with the constant list.

            BREAK
        END

        IF NOT LexMatchToken (
            &colontoken, // token
            TOKEN_COMMA, // type
            0, // subtype
        ) THEN
            // Bad.

            LexError ( &colontoken,
                "Expected a comma or END\n" )
        END
    END

    IF NOT ispacked THEN
        // Make sure the size is aligned to the minimum alignment of the type.

        offset += minalignment - 1
        offset &= ~(minalignment - 1)
    END

    type^.MinimumAlignment = minalignment
    type^.Size = offset

    // Add to the head of the compound type list.

    symbol^.Next = NULLPTR

    IF PrsCompoundTypeListTail THEN
        PrsCompoundTypeListTail^.Next = symbol

    ELSE
        PrsCompoundTypeListHead = symbol
    END

    PrsCompoundTypeListTail = symbol

    RETURN symbol
END

FN (PrsDeclaratorF) PrsParseStruct () : ^LexSymbol

    // Parse a STRUCT declaration.

    packedtoken : LexToken

    ispacked := LexMatchToken (
        &packedtoken, // token
        TOKEN_OTHER, // type
        TOKEN_PACKED, // subtype
    )

    RETURN PrsParseCompoundType (
        TOKEN_STRUCT, // subtype
        ispacked, // ispacked
    )
END

FN (PrsDeclaratorF) PrsParseUnion () : ^LexSymbol

    // Parse a UNION declaration.

    RETURN PrsParseCompoundType (
        TOKEN_UNION, // subtype
        FALSE, // ispacked
    )
END

FN (PrsDeclaratorF) PrsParseType () : ^LexSymbol

    // Parse a TYPE declaration.

    nametoken : LexToken

    IF NOT LexMatchToken (
        &nametoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &nametoken, "Expected an identifier\n" )
    END

    symbol := PrsCreateNamedType ( &nametoken )

    colontoken : LexToken

    IF NOT LexMatchToken (
        &colontoken, // token
        TOKEN_COLON, // type
        0, // subtype
    ) THEN
        LexError ( &colontoken, "Expected a type\n" )
    END

    type := PrsCreateType ()

    PrsType (
        type, // type
        0, // depth
    )

    symbol^.SemanticType = type

    // TYPE declarations can cause cycles. Check if that happened.

    rabbit := type

    WHILE rabbit^.Subtype == TYPE_NAMED DO
        IF rabbit^.Body.Named.Symbol^.Type == SYM_FORWARD_TYPE THEN
            // We don't know yet.

            BREAK
        END

        rabbit = rabbit^.Body.Named.Symbol^.SemanticType

        IF type == rabbit THEN
            LexError ( &nametoken,
                "TYPE declaration causes a cycle\n" )
        END
    END

    RETURN symbol
END

FN PrsParseStorageClassSpecifier (
    IN flags : ULONG,
) : ^LexSymbol

    // Parse any of the storage class specifiers (EXTERN, PUBLIC, etc)

    symbol : ^LexSymbol

    IF LexMatchToken (
        NULLPTR, // token
        TOKEN_DECL, // type
        TOKEN_FN, // subtype
    ) THEN
        symbol = PrsParseFnDeclaration (
            flags, // flags
        )

    ELSE
        token : LexToken

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_IDENTIFIER, // type
            0, // subtype
        ) THEN
            LexError ( &token, "Expected an identifier\n" )
        END

        colontoken : LexToken

        IF NOT LexMatchToken (
            &colontoken, // token
            TOKEN_COLON, // type
            0, // subtype
        ) THEN
            LexError ( &colontoken,
                "Expected a colon (indicating a declaration).\n" )
        END

        symbol = PrsVariableDeclaration (
            &token, // token
            flags, // flags
            TRUE, // global
        )
    END

    IF symbol^.Flags == VAR_FLAG_EXTERN THEN
        symbol^.Section = &LexDefaultSection
    END

    RETURN symbol
END

FN (PrsDeclaratorF) PrsParseExtern () : ^LexSymbol

    // Parse an EXTERN declaration.

    RETURN PrsParseStorageClassSpecifier (
        VAR_FLAG_EXTERN, // flags
    )
END

FN (PrsDeclaratorF) PrsParsePublic () : ^LexSymbol

    // Parse a PUBLIC declaration.

    RETURN PrsParseStorageClassSpecifier (
        VAR_FLAG_PUBLIC, // flags
    )
END

FN (PrsDeclaratorF) PrsParseExport () : ^LexSymbol

    // Parse an EXPORT declaration.

    RETURN PrsParseStorageClassSpecifier (
        VAR_FLAG_EXPORT, // flags
    )
END

FN (PrsDeclaratorF) PrsParsePrivate () : ^LexSymbol

    // Parse a PRIVATE declaration.

    RETURN PrsParseStorageClassSpecifier (
        0, // flags
    )
END

// Statement parse routines.

FN (PrsStatementF) PrsParseBreak (
    IN token : ^LexToken,
)

    // Parse a BREAK statement.

    IF NOT PrsWhileDepth THEN
        LexError ( token, "Can't BREAK outside of a WHILE loop\n" )
    END

    // Just create an AST node for it and add it to the current block.

    node := PrsCreateAstNode (
        AST_BREAK, // type
        token, // token
    )

    // The token subtype is used to identify the type of the statement.

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseContinue (
    IN token : ^LexToken,
)

    // Parse a CONTINUE statement.

    IF NOT PrsWhileDepth THEN
        LexError ( token,
            "Can't CONTINUE outside of a WHILE loop\n" )
    END

    // Just create an AST node for it and add it to the current block.

    node := PrsCreateAstNode (
        AST_CONTINUE, // type
        token, // token
    )

    // The token subtype is used to identify the type of the statement.

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseGoTo (
    IN token : ^LexToken,
)

    // Parse a GOTO statement.

    // Before collecting the label identifier, drop to function scope, since
    // that's where labels live.

    LexEnterOverlayScope ( PrsCurrentFunction^.Body.Function.FuncScope )

    labeltoken : LexToken

    IF NOT LexMatchToken (
        &labeltoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &labeltoken, "Expected identifier\n" )
    END

    LexExitOverlayScope ()

    symbol := CAST labeltoken.Payload TO ^LexSymbol

    IF labeltoken.Subtype == TOKEN_IDENTIFIER_FOUND THEN
        IF symbol^.Type != SYM_FORWARD_LABEL AND symbol^.Type != SYM_LABEL THEN
            LexError ( &labeltoken, "Expected a label name\n" )
        END

    ELSE
        // New symbol, which means this is a forward declared label. Set that
        // up. Note that unlike most other stuff, the code generator needs to
        // notice an error here (a forward-declared label that is never declared
        // for real).

        symbol^.Type = SYM_FORWARD_LABEL

        // Initialize the refcount of the label.

        symbol^.Value = 0
    END

    // The refcount of the label is kept in the Value field; increment it since
    // we just referenced it with a GOTO!

    symbol^.Value += 1

    node := PrsCreateAstNode (
        AST_GOTO, // type
        &labeltoken, // token
    )

    node^.Body.Statement.StatementSpecific = symbol

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseIf (
    IN token : ^LexToken,
)

    // Parse an IF statement. This is a chain of conditional bodies plus an ELSE
    // body. If we run into a constant conditional which evaluates truthy, we
    // can ignore the rest of the clauses, but we still have to parse each of
    // them to get them out of the token stream. Equivalently, if we run into a
    // constant conditional which evaluates falsey, we can completely omit it.

    node := PrsCreateAstNode (
        AST_IF, // type
        token, // token
    )

    node^.Body.If.CaseListHead = NULLPTR
    node^.Body.If.CaseListTail = NULLPTR
    node^.Body.If.ElseBlock = NULLPTR

    ignore := FALSE
    elsenext := FALSE

    WHILE TRUE DO
        thiscase : ^PrsIfCase

        status := TlBumpAlloc (
            SIZEOF PrsIfCase, // bytes
            OUT thiscase, // ptr
        )

        IF status THEN
            TlInternalError ( "Failed to allocate IF case", 0, 0, 0 )
        END

        // Collect the conditional expression.

        cond := PrsExpression ( 0 )

        PrsCheckNodeIsValue ( cond )

        thiscase^.Conditional = cond

        thentoken : LexToken

        IF NOT LexMatchToken (
            &thentoken, // token
            TOKEN_OTHER, // type
            TOKEN_THEN, // subtype
        ) THEN
            LexError ( &thentoken, "Expected THEN\n" )
        END

        // Enter the scope and collect the body block.

        LexEnterScope ( NULLPTR )

        TlInsertDynamicBuffer (
            &PrsBlockStack, // array
            BLOCK_IF_BODY, // byte
        )

        terminator : LexTokenSubtype

        thiscase^.BodyBlock = PrsParseBlock (
            OUT terminator, // terminator
        )

        TlPopDynamicBuffer ( &PrsBlockStack )

        LexLeaveScope ()

        IF ignore OR (cond^.Type == AST_CONSTANT AND
            cond^.Body.Constant.Value == 0) THEN

            // This block will be completely elided.

            IF thiscase^.BodyBlock^.LabelCount THEN
                LexError ( &thentoken,
                    "One or more labels inside inaccessible block\n" )
            END

        ELSE
            // Add the block.

            thiscase^.Next = NULLPTR

            IF NOT node^.Body.If.CaseListTail THEN
                node^.Body.If.CaseListHead = thiscase
            ELSE

                node^.Body.If.CaseListTail^.Next = thiscase
            END

            node^.Body.If.CaseListTail = thiscase

            // If the block has a non-zero constant value, ignore the rest, as
            // they can never execute.

            IF cond^.Type == AST_CONSTANT AND cond^.Body.Constant.Value THEN
                ignore = TRUE
            END
        END

        IF terminator == TOKEN_END THEN
            // We're done!

            BREAK
        END

        IF terminator == TOKEN_ELSE THEN
            // There's just an ELSE block and then we're done.

            elsenext = TRUE

            BREAK
        END

        IF terminator == TOKEN_ELSEIF THEN
            // Keep going.

            CONTINUE
        END

        TlInternalError ( "PrsParseIf Unreachable", 0, 0, 0 )
    END

    IF elsenext THEN
        // Parse the ELSE block.

        LexEnterScope ( NULLPTR )

        TlInsertDynamicBuffer (
            &PrsBlockStack, // array
            BLOCK_PLAIN_BODY, // byte
        )

        terminator : LexTokenSubtype

        elseblock := PrsParseBlock (
            OUT terminator, // terminator
        )

        TlPopDynamicBuffer ( &PrsBlockStack )

        LexLeaveScope ()

        IF ignore THEN
            // Exclude the ELSE block as it can never execute.

            IF elseblock^.LabelCount THEN
                LexError ( token,
                    "One or more labels inside inaccessible ELSE block\n" )
            END

        ELSE
            node^.Body.If.ElseBlock = elseblock
        END
    END

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseLeave (
    IN token : ^LexToken,
)

    // Parse a LEAVE statement.

    IF PrsCurrentFunction^.Body.Function.ReturnType THEN
        LexError ( token,
            "Can't LEAVE from a function with a return value, use RETURN\n" )
    END

    // Just create an AST node for it and add it to the current block.

    node := PrsCreateAstNode (
        AST_RETURN, // type
        token, // token
    )

    node^.Body.Statement.StatementSpecific = NULLPTR

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseReturn (
    IN token : ^LexToken,
)

    // Parse a RETURN statement.

    returntype := PrsCurrentFunction^.Body.Function.ReturnType

    IF NOT returntype THEN
        LexError ( token,
            "Can't RETURN from a function with no return value, use LEAVE\n" )
    END

    // Just create an AST node for it and add it to the current block.

    node := PrsCreateAstNode (
        AST_RETURN, // type
        token, // token
    )

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )

    // Parse the return value expression.

    retexpr := PrsExpression ( 0 )

    retexprtype := PrsEvaluateType ( retexpr )

    IF NOT PrsTypeIsValue (
        &retexpr^.Token, // errtoken
        retexprtype, // type
    ) THEN
        LexError ( &retexpr^.Token,
            "This type is not directly usable as a value\n" )
    END

    PrsCheckType (
        &retexpr^.Token, // errtoken
        returntype, // type1
        retexprtype, // type2
        "Return value: ", // errstring
        FALSE, // equivalence
    )

    IF retexpr^.Type == AST_CONSTANT THEN
        // Check if the constant fits in the type.

        PrsCheckConstant (
            &retexpr^.Token, // errtoken
            returntype, // type
            retexpr^.Body.Constant.Value, // body
        )
    END

    node^.Body.Statement.StatementSpecific = retexpr
END

FN (PrsStatementF) PrsParseWhile (
    IN token : ^LexToken,
)

    // Parse a WHILE loop.

    node := PrsCreateAstNode (
        AST_WHILE, // type
        token, // token
    )

    cond := PrsExpression ( 0 )

    PrsCheckNodeIsValue ( cond )

    node^.Body.While.Conditional = cond

    dotoken : LexToken

    IF NOT LexMatchToken (
        &dotoken, // token
        TOKEN_OTHER, // type
        TOKEN_DO, // subtype
    ) THEN
        LexError ( &dotoken, "Expected DO\n" )
    END

    LexEnterScope ( NULLPTR )

    TlInsertDynamicBuffer (
        &PrsBlockStack, // array
        BLOCK_PLAIN_BODY, // byte
    )

    terminator : LexTokenSubtype

    PrsWhileDepth += 1

    node^.Body.While.BodyBlock = PrsParseBlock (
        OUT terminator, // terminator
    )

    PrsWhileDepth -= 1

    TlPopDynamicBuffer ( &PrsBlockStack )

    LexLeaveScope ()

    // We can completely eliminate the WHILE if it has a constant expression
    // with a value of zero.

    IF cond^.Type == AST_CONSTANT AND
        cond^.Body.Constant.Value == 0 THEN

        // It does! Early out before we insert it into the current block.

        IF node^.Body.While.BodyBlock^.LabelCount THEN
            LexError ( &dotoken,
                "One or more labels inside inaccessible block\n" )
        END

        LEAVE
    END

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseBarrier (
    IN token : ^LexToken,
)

    // Parse a BARRIER statement.

    // Just create an AST node for it and add it to the current block.

    node := PrsCreateAstNode (
        AST_BARRIER, // type
        token, // token
    )

    // The token subtype is used to identify the type of the statement.

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseInsertAsm (
    IN token : ^LexToken,
)

    // Parse an INSERTASM statement.

    asmtoken : LexToken

    IF NOT LexMatchToken (
        &asmtoken, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &asmtoken, "Expected string\n" )
    END

    // Just create an AST node for it and add it to the current block.

    node := PrsCreateAstNode (
        AST_INSERTASM, // type
        token, // token
    )

    node^.Body.Statement.StatementSpecific = asmtoken.Payload

    // The token subtype is used to identify the type of the statement.

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )
END

FN (PrsStatementF) PrsParseNothing (
    IN token : ^LexToken,
)

    // Parse a NOTHING statement.

    // Do absolutely nothing.
END

FN (PrsStatementF) PrsParseLabel (
    IN token : ^LexToken,
)

    // Parse a label definition. Goes in the function scope.

    // Before collecting the label identifier, drop to function scope, since
    // that's where labels live.

    LexEnterOverlayScope ( PrsCurrentFunction^.Body.Function.FuncScope )

    labeltoken : LexToken

    IF NOT LexMatchToken (
        &labeltoken, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexError ( &labeltoken, "Expected identifier\n" )
    END

    LexExitOverlayScope ()

    symbol := CAST labeltoken.Payload TO ^LexSymbol

    IF labeltoken.Subtype == TOKEN_IDENTIFIER_FOUND THEN
        IF symbol^.Type != SYM_FORWARD_LABEL THEN
            LexError ( &labeltoken, "Identifier already in use\n" )
        END

    ELSE
        // New symbol, set it up.
        // Initialize the refcount of the label.

        symbol^.Value = 0
    END

    symbol^.Type = SYM_LABEL

    node := PrsCreateAstNode (
        AST_LABEL, // type
        &labeltoken, // token
    )

    node^.Body.Statement.StatementSpecific = symbol

    PrsInsertNodeIntoBlock (
        PrsCurrentBlock, // block
        node, // node
    )

    PrsCurrentBlock^.LabelCount += 1
END

// Type evaluation functions.

FN (PrsOperatorEvalF) PrsEvalCompoundTypeIndex (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    fieldsymbol := CAST node^.Body.Operator.OperatorSpecific TO ^LexSymbol

    RETURN fieldsymbol^.SemanticType
END

FN (PrsOperatorEvalF) PrsEvalArrayIndex (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Get the type of the left hand side, which must be an array type (else the
    // parser would have complained to the user earlier). Then return the base
    // of that.

    type := PrsEvaluateType ( node^.Body.Operator.Left )

    IF type^.Subtype == TYPE_ARRAY THEN
        RETURN type^.Body.Array.Base
    END

    // Must have been a pointer actually. We can index those too.

    RETURN type^.Body.Pointer.Base
END

FN (PrsOperatorEvalF) PrsEvalFunctionCall (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Get the type of the left hand side, which must be a function type (else
    // the parser would have complained to the user earlier). Then return the
    // return value of that.

    type := PrsEvaluateType ( node^.Body.Operator.Left )

    IF NOT type^.Body.Function.ReturnType THEN
        LexError ( &node^.Token,
            "Attempt to take return type of return-less function\n" )
    END

    RETURN type^.Body.Function.ReturnType
END

FN (PrsOperatorEvalF) PrsEvalPtrDereference (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Get the type of the left hand side, which must be a pointer type, else
    // the parser would have complained earlier.

    type := PrsEvaluateType ( node^.Body.Operator.Left )

    RETURN type^.Body.Pointer.Base
END

FN (PrsOperatorEvalF) PrsEvalArithmetic (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // If either side is a pointer, return the pointer type.

    left := node^.Body.Operator.Left
    right := node^.Body.Operator.Right

    lefttype := PrsEvaluateType ( left )

    IF lefttype^.Subtype == TYPE_POINTER THEN
        RETURN lefttype
    END

    righttype := PrsEvaluateType ( right )

    IF righttype^.Subtype == TYPE_POINTER THEN
        RETURN righttype
    END

    // If either side is a constant, return the other type.

    IF left^.Type == AST_CONSTANT THEN
        RETURN righttype
    END

    IF right^.Type == AST_CONSTANT THEN
        RETURN lefttype
    END

    // Return the left type.

    RETURN lefttype
END

FN (PrsOperatorEvalF) PrsEvalConditional (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Return the constant type.

    RETURN PrsConstantType
END

FN (PrsOperatorEvalF) PrsEvalAddrOf (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Get the type of the left hand side and wrap it in a pointer.

    type := PrsEvaluateType ( node^.Body.Operator.Left )

    ptrtype := PrsCreateType ()

    ptrtype^.Subtype = TYPE_POINTER
    ptrtype^.Body.Pointer.Base = type
    ptrtype^.MinimumAlignment = JklTargetInfo^.PointerAlignment
    ptrtype^.Size = JklTargetInfo^.PointerSize

    RETURN ptrtype
END

FN (PrsOperatorEvalF) PrsEvalUnaryArithmetic (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Just forward the type of the left side.

    RETURN PrsEvaluateType ( node^.Body.Operator.Left )
END

FN (PrsOperatorEvalF) PrsEvalUnaryConditional (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Return the constant type.

    RETURN PrsConstantType
END

FN (PrsOperatorEvalF) PrsEvalCast (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Return the casted-to type.

    RETURN node^.Body.Operator.OperatorSpecific
END

FN (PrsOperatorEvalF) PrsEvalSizeOfValue (
    IN node : ^PrsAstNode,
) : ^LexSemanticType

    // Return the constant type.

    RETURN PrsConstantType
END

PrsOperators : PrsOperatorRecord[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_DOT] = {
        [Precedence] = 25,
        [ParseFunc] = &PrsParseCompoundTypeIndex,
        [EvalFunc] = &PrsEvalCompoundTypeIndex,
        [NoRightSide] = TRUE,
    },
    [TOKEN_LBRACKET] = {
        [Precedence] = 25,
        [ParseFunc] = &PrsParseArrayIndex,
        [EvalFunc] = &PrsEvalArrayIndex,
        [NoRightSide] = TRUE,
    },
    [TOKEN_LPAREN] = {
        [Precedence] = 25,
        [ParseFunc] = &PrsParseFunctionCall,
        [EvalFunc] = &PrsEvalFunctionCall,
        [NoRightSide] = TRUE,
    },
    [TOKEN_CARET] = {
        [Precedence] = 25,
        [ParseFunc] = &PrsParsePtrDereference,
        [EvalFunc] = &PrsEvalPtrDereference,
        [NoRightSide] = TRUE,
    },
    [TOKEN_MUL] = {
        [Precedence] = 20,
        [ParseFunc] = &PrsParseMul,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_DIVIDE] = {
        [Precedence] = 20,
        [ParseFunc] = &PrsParseDivide,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_MODULO] = {
        [Precedence] = 20,
        [ParseFunc] = &PrsParseModulo,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_PLUS] = {
        [Precedence] = 19,
        [ParseFunc] = &PrsParsePlus,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_MINUS] = {
        [Precedence] = 19,
        [ParseFunc] = &PrsParseMinus,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_LEFTSHIFT] = {
        [Precedence] = 18,
        [ParseFunc] = &PrsParseLeftShift,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_RIGHTSHIFT] = {
        [Precedence] = 18,
        [ParseFunc] = &PrsParseRightShift,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_BITAND] = {
        [Precedence] = 17,
        [ParseFunc] = &PrsParseBitAnd,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_BITXOR] = {
        [Precedence] = 16,
        [ParseFunc] = &PrsParseBitXor,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_BITOR] = {
        [Precedence] = 15,
        [ParseFunc] = &PrsParseBitOr,
        [EvalFunc] = &PrsEvalArithmetic,
    },
    [TOKEN_LESSTHAN] = {
        [Precedence] = 14,
        [ParseFunc] = &PrsParseLessThan,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_GREATERTHAN] = {
        [Precedence] = 14,
        [ParseFunc] = &PrsParseGreaterThan,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_LTEQ] = {
        [Precedence] = 14,
        [ParseFunc] = &PrsParseLtEq,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_GTEQ] = {
        [Precedence] = 14,
        [ParseFunc] = &PrsParseGtEq,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_EQUIV] = {
        [Precedence] = 13,
        [ParseFunc] = &PrsParseEquiv,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_NOTEQUIV] = {
        [Precedence] = 13,
        [ParseFunc] = &PrsParseNotEquiv,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_AND] = {
        [Precedence] = 12,
        [ParseFunc] = &PrsParseAnd,
        [EvalFunc] = &PrsEvalConditional,
    },
    [TOKEN_OR] = {
        [Precedence] = 11,
        [ParseFunc] = &PrsParseOr,
        [EvalFunc] = &PrsEvalConditional,
    },

    // Left-ops

    [TOKEN_ADDROF] = {
        [EvalFunc] = &PrsEvalAddrOf,
    },
    [TOKEN_NOT] = {
        [EvalFunc] = &PrsEvalUnaryConditional,
    },
    [TOKEN_BITNOT] = {
        [EvalFunc] = &PrsEvalUnaryArithmetic,
    },
    [TOKEN_CAST] = {
        [EvalFunc] = &PrsEvalCast,
    },
    [TOKEN_SIZEOFVALUE] = {
        [EvalFunc] = &PrsEvalSizeOfValue,
    },
}

PrsLeftOperators : PrsOperatorRecord[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_BITAND] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseAddrOf,
    },
    [TOKEN_MINUS] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseInverse,
    },
    [TOKEN_NOT] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseNot,
    },
    [TOKEN_BITNOT] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseBitNot,
    },
    [TOKEN_CAST] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseCast,
        [NoRightSide] = TRUE,
    },
    [TOKEN_CONTAINEROF] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseContainerOf,
        [NoRightSide] = TRUE,
    },
    [TOKEN_SIZEOFVALUE] = {
        [Precedence] = 24,
        [ParseFunc] = &PrsParseSizeOfValue,
    },
}

PrsDeclarators : PrsDeclaratorF[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_ENUM] = &PrsParseEnum,
    [TOKEN_EXTERN] = &PrsParseExtern,
    [TOKEN_FN] = &PrsParseFn,
    [TOKEN_FNPTR] = &PrsParseFnPtr,
    [TOKEN_PUBLIC] = &PrsParsePublic,
    [TOKEN_STRUCT] = &PrsParseStruct,
    [TOKEN_TYPE] = &PrsParseType,
    [TOKEN_UNION] = &PrsParseUnion,
    [TOKEN_EXPORT] = &PrsParseExport,
    [TOKEN_PRIVATE] = &PrsParsePrivate,
}

PrsStatements : PrsStatementF[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_BREAK] = &PrsParseBreak,
    [TOKEN_CONTINUE] = &PrsParseContinue,
    [TOKEN_GOTO] = &PrsParseGoTo,
    [TOKEN_IF] = &PrsParseIf,
    [TOKEN_LEAVE] = &PrsParseLeave,
    [TOKEN_RETURN] = &PrsParseReturn,
    [TOKEN_WHILE] = &PrsParseWhile,
    [TOKEN_BARRIER] = &PrsParseBarrier,
    [TOKEN_INSERTASM] = &PrsParseInsertAsm,
    [TOKEN_NOTHING] = &PrsParseNothing,
    [TOKEN_LABEL] = &PrsParseLabel,
}

FN PrsInitialize ()

    // Initialize the parser.

    TlInitializeDynamicBuffer ( &PrsBlockStack )

    // Set up the cached pre-built types.

    // Set up the string type as pointer to UBYTE.

    PrsStringType = PrsCreateType ()
    primtype := PrsCreateType ()

    primtype^.Subtype = TYPE_PRIMITIVE
    primtype^.Body.Primitive.Type = PRIM_TYPE_UBYTE
    primtype^.Body.Primitive.Inducible = FALSE

    primtype^.Size =
        JklTargetInfo^.PrimitiveSize[PRIM_TYPE_UBYTE]

    primtype^.MinimumAlignment =
        JklTargetInfo^.PrimitiveAlignment[PRIM_TYPE_UBYTE]

    PrsStringType^.Subtype = TYPE_POINTER
    PrsStringType^.Body.Pointer.Base = primtype

    PrsStringType^.Size = JklTargetInfo^.PointerSize
    PrsStringType^.MinimumAlignment = JklTargetInfo^.PointerAlignment

    // Set up the NULLPTR type as pointer to VOID.

    PrsNullPtrType = PrsCreateType ()
    primtype = PrsCreateType ()

    primtype^.Subtype = TYPE_PRIMITIVE
    primtype^.Body.Primitive.Type = PRIM_TYPE_VOID
    primtype^.Body.Primitive.Inducible = FALSE

    PrsNullPtrType^.Subtype = TYPE_POINTER
    PrsNullPtrType^.Body.Pointer.Base = primtype

    PrsNullPtrType^.Size = JklTargetInfo^.PointerSize
    PrsNullPtrType^.MinimumAlignment = JklTargetInfo^.PointerAlignment

    // Set up the constant type as the largest signed primitive.

    PrsConstantType = PrsCreateType ()

    PrsConstantType^.Subtype = TYPE_PRIMITIVE
    PrsConstantType^.Body.Primitive.Type = JklTargetInfo^.LargestPrimitive
    PrsConstantType^.Body.Primitive.Inducible = TRUE

    PrsConstantType^.Size =
        JklTargetInfo^.PrimitiveSize[JklTargetInfo^.LargestPrimitive]

    PrsConstantType^.MinimumAlignment =
        JklTargetInfo^.PrimitiveAlignment[JklTargetInfo^.LargestPrimitive]

    // Set up the vararg table type as pointer to pointer to VOID.

    PrsVarArgType = PrsCreateType ()

    PrsVarArgType^.Subtype = TYPE_POINTER
    PrsVarArgType^.Body.Pointer.Base = PrsNullPtrType

    PrsVarArgType^.Size = JklTargetInfo^.PointerSize
    PrsVarArgType^.MinimumAlignment = JklTargetInfo^.PointerAlignment
END

FN PrsProgram ()

    // Parse a program. This consists of a sequence of global declarations. We
    // also want to place these global declarations on lists so the subsequent
    // phases can use them appropriately, linked via the symbol table entry
    // given to us by the lexer.

    WHILE PrsGlobalDeclaration () DO
        // Keep going...
    END
END
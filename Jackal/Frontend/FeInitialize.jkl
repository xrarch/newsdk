//
// Frontend initialization.
//

#INCLUDE "<inc>/Parser.hjk"

PUBLIC FeLibraryDirectory : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeIncludeDirectory : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeInputFile : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeOutputFile : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeTargetString : UBYTE[FE_PATH_BUFFER_SIZE]

PUBLIC FeInputFileHandle : ^VOID
PUBLIC FeOutputFileHandle : ^VOID

PUBLIC FeOutputHeaders : ^UBYTE = NULLPTR

PUBLIC FeRootFileBlock : ^FeFileBlock

PUBLIC JklTargetInfo : ^JklTargetInfoRecord = NULLPTR

PUBLIC JklPrimitiveTypeMasks : UWORD[PRIM_TYPE_MAX] = {
    [PRIM_TYPE_UBYTE] = 0xFF,
    [PRIM_TYPE_UINT] = 0xFFFF,
    [PRIM_TYPE_ULONG] = 0xFFFFFFFF,

    [PRIM_TYPE_BYTE] = 0xFF,
    [PRIM_TYPE_INT] = 0xFFFF,
    [PRIM_TYPE_LONG] = 0xFFFFFFFF,

#IF ( == BLD_BITS 64 )
    [PRIM_TYPE_UQUAD] = 0xFFFFFFFFFFFFFFFF,
    [PRIM_TYPE_QUAD] = 0xFFFFFFFFFFFFFFFF,
#END
}

PUBLIC JklSignExtendedTypeMasks : UWORD[PRIM_TYPE_MAX] = {
#IF ( == BLD_BITS 64 )
    [PRIM_TYPE_UBYTE] = 0xFFFFFFFFFFFFFF80,
    [PRIM_TYPE_UINT] = 0xFFFFFFFFFFFF8000,
    [PRIM_TYPE_ULONG] = 0xFFFFFFFF80000000,
    [PRIM_TYPE_UQUAD] = 0x8000000000000000,

    [PRIM_TYPE_BYTE] = 0xFFFFFFFFFFFFFF80,
    [PRIM_TYPE_INT] = 0xFFFFFFFFFFFF8000,
    [PRIM_TYPE_LONG] = 0xFFFFFFFF80000000,
    [PRIM_TYPE_QUAD] = 0x8000000000000000,
#ELSE
    [PRIM_TYPE_UBYTE] = 0xFFFFFF80,
    [PRIM_TYPE_UINT] = 0xFFFF8000,
    [PRIM_TYPE_ULONG] = 0x80000000,

    [PRIM_TYPE_BYTE] = 0xFFFFFF80,
    [PRIM_TYPE_INT] = 0xFFFF8000,
    [PRIM_TYPE_LONG] = 0x80000000,
#END
}

FN JklUsage ()
    
    TlPrintByHandle (
        TlStdErr, // handle
        "Usage: %s [inputfile] [outputfile] target=[CHost/xr17032/fox32]\n", // fmt
        TlProgramName,
    )

    TlErrorExit ()
END

FeFileBlockHashTable : TlHashTable

FN FeIsMacroArgument (
    IN arg : ^UBYTE,
) : ^UBYTE

    i := 0

    WHILE arg[i] DO
        IF arg[i] == '=' THEN
            RETURN &arg[i]
        END

        i += 1
    END

    RETURN NULLPTR
END

FN FeParseArguments (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Find the value of these arguments, if they exist:
    //  libdir=
    //  incdir=
    //  target=
    //
    // Identify the source and destination filenames.

    FeLibraryDirectory[0] = 0
    FeIncludeDirectory[0] = 0

    foundinput := FALSE
    foundoutput := FALSE
    foundtarget := FALSE

    i := 1

    WHILE i < argc DO
        IF TlCompareStringWithMax ( argv[i], "libdir=", 7 ) == 0 THEN
            TlCopyString (
                &FeLibraryDirectory[0], // dest
                &argv[i][7], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

        ELSEIF TlCompareStringWithMax ( argv[i], "incdir=", 7 ) == 0 THEN
            TlCopyString (
                &FeIncludeDirectory[0], // dest
                &argv[i][7], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

        ELSEIF TlCompareStringWithMax ( argv[i], "target=", 7 ) == 0 THEN
            TlCopyString (
                &FeTargetString[0], // dest
                &argv[i][7], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

            foundtarget = TRUE

        ELSEIF TlCompareStringWithMax ( argv[i], "header=", 7 ) == 0 THEN
            FeOutputHeaders = &argv[i][7]

        ELSEIF FeIsMacroArgument ( argv[i] ) THEN
            LexDefineMacroFromArgumentString ( argv[i] )

        ELSEIF foundinput THEN
            IF foundoutput THEN
                JklUsage ()
            END

            foundoutput = TRUE

            TlCopyString (
                &FeOutputFile[0], // dest
                argv[i], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

        ELSE
            foundinput = TRUE

            TlCopyString (
                &FeInputFile[0], // dest
                argv[i], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )
        END

        i += 1
    END

    IF NOT foundinput THEN
        TlError ( "No input file specified.\n" )
    END

    IF NOT foundoutput THEN
        TlError ( "No output file specified.\n" )
    END

    IF NOT foundtarget THEN
        // Default to the architecture the tool was built for.

        TlCopyString (
            &FeTargetString[0], // dest
            TL_ARCH_STRING, // src
            FE_PATH_BUFFER_SIZE, // bufsize
        )
    END
END

FN FeCreateFileBlock (
    IN includename : ^UBYTE,
    OUT created : UBYTE,
) : ^FeFileBlock

    fileblock := CAST TlLookupOrAllocateEntryHashTable (
        &FeFileBlockHashTable, // hashtable
        SIZEOF FeFileBlock, // entrysize
        includename, // key
        OUT created, // created
    ) TO ^FeFileBlock

    IF created THEN
        // Initialize the file block, since it didn't already exist.

        TlCopyString (
            &fileblock^.IncludeName[0], // dest
            includename, // src
            FE_PATH_BUFFER_SIZE, // bufsize
        )

        // Manually set the key on the hash table entry, because the one we
        // passed in isn't permanent. If we left it like that, it'd try to use
        // random memory as the key for comparison later, which is bad.

        fileblock^.Entry.Key = &fileblock^.IncludeName[0]
    END

    RETURN fileblock
END

FN FeCopyPathFileBlock (
    IN fileblock : ^FeFileBlock,
    IN filepath : ^UBYTE,
)

    TlCopyString (
        &fileblock^.FilePath[0], // dest
        filepath, // src
        FE_PATH_BUFFER_SIZE, // bufsize
    )
END

EXTERN CtTargetInfo : JklTargetInfoRecord
EXTERN FoxTargetInfo : JklTargetInfoRecord
EXTERN XrTargetInfo : JklTargetInfoRecord

TrgInfoRecords : ^JklTargetInfoRecord[] = {
#IF TRG_CT
    &CtTargetInfo,
#END
#IF TRG_FOX32
    &FoxTargetInfo,
#END
#IF TRG_XR17032
    &XrTargetInfo,
#END

    NULLPTR, // MUST be here, as a sentinel
}

FN TrgInitialize ()
    
    // Initialize the target.

    target := &TrgInfoRecords[0]

    WHILE target^ != NULLPTR DO
        IF TlCompareString ( &FeTargetString[0], target^^.Name ) == 0 THEN
            JklTargetInfo = target^

            JklPrimitiveTypeMasks[PRIM_TYPE_POINTER] =
                JklTargetInfo^.PointerMask

            JklSignExtendedTypeMasks[PRIM_TYPE_POINTER] =
                JklTargetInfo^.PointerMask

            LEAVE
        END

        target += SIZEOF ^VOID
    END

    TlUserError ( "Unknown target specified", 0, 0, 0 )
END

FN FeInitialize (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Initialize the file block hash table.

    TlInitializeHashTable ( &FeFileBlockHashTable )

    // Initialize the preprocessor.

    LexInitializePreprocessor ()

    // Parse the arguments.

    FeParseArguments ( argc, argv )

    // Open the input and output files.

    status := TlOpenSource (
        &FeInputFile[0], // filename
        OUT FeInputFileHandle, // handle
    )

    IF status THEN
        TlUserError ( "Failed to open source file.", 0, 0, 0 )
    END

    // Initialize the target.

    TrgInitialize ()

    // Initialize the lexer.

    LexInitialize ()

    // Initialize the parser.

    PrsInitialize ()
END

FN FeOutputHeaderDependencies ()

    // Output all of the header dependencies of this source file to a file.

    handle : ^VOID

    status := TlOpenDestination (
        FeOutputHeaders, // filename
        OUT handle, // handle
    )

    IF status THEN
        TlUserError ( "Failed to open header dependencies file.", 0, 0, 0 )
    END

    headerbuf : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &headerbuf )

    head := &FeFileBlockHashTable.OrderedListHead
    entry := head^.Prev

    WHILE head != entry DO
        hashentry := CONTAINEROF entry TO TlHashTableEntry.OrderedEntry

        fileblock := CAST hashentry TO ^FeFileBlock

        IF fileblock != FeRootFileBlock THEN
            TlCopyIntoDynamicBuffer (
                &headerbuf, // array
                &fileblock^.FilePath[0], // srcbuf
                TlMeasureString ( &fileblock^.FilePath[0] ), // length
            )

            TlInsertDynamicBuffer (
                &headerbuf, // array
                '\n', // byte
            )
        END

        entry = entry^.Prev
    END

    TlWriteFile (
        handle, // handle
        headerbuf.Count, // bytes
        headerbuf.Buffer, // buffer
    )

    TlUninitializeDynamicBuffer ( &headerbuf )
END

EXTERN FN IrGenerate ()
EXTERN FN IrSimplify ()
EXTERN FN IrEliminateDeadVariables ()
EXTERN FN IrCleanUp ()

FN TlMain (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Compile the entire program.

    // Initialize the front-end components.

    FeInitialize (
        argc, // argc
        argv, // argv
    )

    // Parse the program and construct a global symbol table and abstract syntax
    // trees.

    PrsProgram ()

    // Generate IR for each function.

    IrGenerate ()

    // Perform IR simplification pass.

    IrSimplify ()

    // Perform dead variable elimination.

    IrEliminateDeadVariables ()

    // Perform final pass over IR for branch resolution and trivial dead code
    // elimination.

    IrCleanUp ()

    // Open the output file.

    status := TlOpenDestination (
        &FeOutputFile[0], // filename
        OUT FeOutputFileHandle, // handle
    )

    IF status THEN
        TlUserError ( "Failed to open destination file.", 0, 0, 0 )
    END

    // Call the target-specific code to finish compilation.

    JklTargetInfo^.EntryFunc ()

    // Output header dependencies to a text file, in order of when they were
    // encountered.

    IF FeOutputHeaders THEN
        FeOutputHeaderDependencies ()
    END
END